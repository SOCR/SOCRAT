// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var EventMngr,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require('scripts/core/mediator.coffee');


  /*
   * @name EventMngr
   * @desc Class for managing module interactions
   */

  module.exports = EventMngr = (function() {
    function EventMngr(pubSub) {
      this.pubSub = pubSub;
      this.redirectMsg = bind(this.redirectMsg, this);
      this._msgMap = {};
    }

    EventMngr._DATA_TYPES = {
      'FLAT': 'FLAT',
      'NESTED': 'NESTED'
    };

    EventMngr.prototype.setMsgMap = function(msgMap) {
      return this._msgMap = msgMap;
    };

    EventMngr.prototype.subscribeForEvents = function(events, listener) {
      var i, len, msg, ref, results;
      ref = events.msgList;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        msg = ref[i];
        results.push(this.pubSub.subscribe({
          msg: msg,
          listener: listener,
          msgScope: events.scope
        }));
      }
      return results;
    };

    EventMngr.prototype.redirectMsg = function(msg, data) {
      var i, len, matches, o, ref;
      matches = 0;
      ref = this._msgMap;
      for (i = 0, len = ref.length; i < len; i++) {
        o = ref[i];
        if (!(o.msgFrom === msg)) {
          continue;
        }
        this.pubSub.publish({
          msg: o.msgTo,
          data: data,
          msgScope: o.scopeTo
        });
        console.log('%cEVENT MANAGER: redirect mgs ' + o.msgTo + ' to ' + o.scopeTo, 'color:blue');
        matches += 1;
      }
      if (matches === 0) {
        console.log('%ccEVENT MANAGER: no mapping in API for message: ' + msg, 'color:blue');
        return false;
      } else {
        return true;
      }
    };

    EventMngr.prototype.getInterface = function() {
      return {
        subscribeForEvents: this.subscribeForEvents,
        redirectMsg: this.redirectMsg,
        getSupportedDataTypes: (function(_this) {
          return function() {
            return _this.constructor._DATA_TYPES;
          };
        })(this),
        publish: this.pubSub.publish,
        subscribe: this.pubSub.subscribe,
        unsubscribe: this.pubSub.unsubscribe
      };
    };

    return EventMngr;

  })();

  EventMngr.$inject = ['pubSub'];

  angular.module('app_eventMngr', ['app_mediator']).service('eventMngr', EventMngr);

}).call(this);

//# sourceMappingURL=eventMngr.js.map
