// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';

  /*
   * @name Utils
   * @desc Class for utility functions
   */
  var Utils,
    slice = [].slice;

  module.exports = Utils = (function() {
    function Utils() {}

    Utils.prototype.typeIsArray = Array.isArray || function(value) {
      return {}.toString.call(value) === '[object Array]';
    };

    Utils.prototype.installFromTo = function(srcObj, resObj) {
      var k, v;
      if (typeof resObj === 'object' && typeof srcObj === 'object') {
        for (k in srcObj) {
          v = srcObj[k];
          resObj[k] = v;
        }
        return true;
      } else {
        return false;
      }
    };

    Utils.prototype.fnRgx = /function[^(]*\(([^)]*)\)/;

    Utils.prototype.argRgx = /([^\s,]+)/g;

    Utils.prototype.getArgumentNames = function(fn) {
      var ref;
      return ((fn != null ? (ref = fn.toString().match(this.fnRgx)) != null ? ref[1] : void 0 : void 0) || '').match(this.argRgx) || [];
    };


    /* based on RFC 4122, section 4.4 */

    Utils.prototype.generateGuid = function() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = (c === 'x' ? r : r & 0x3 | 0x8);
        return v.toString(16);
      });
    };

    Utils.prototype.runParallel = function(tasks, cb, force) {
      var count, errors, hasErr, i, j, len, results, results1, t;
      if (tasks == null) {
        tasks = [];
      }
      if (cb == null) {
        cb = (function() {});
      }
      count = tasks.length;
      results = [];
      if (count === 0) {
        return cb(null, results);
      }
      errors = [];
      hasErr = false;
      results1 = [];
      for (i = j = 0, len = tasks.length; j < len; i = ++j) {
        t = tasks[i];
        results1.push((function(t, i) {
          var e, next;
          next = function() {
            var err, res;
            err = arguments[0], res = 2 <= arguments.length ? slice.call(arguments, 1) : [];
            if (err) {
              errors[i] = err;
              hasErr = true;
              if (!force) {
                return cb(errors, results);
              }
            } else {
              results[i] = res.length < 2 ? res[0] : res;
            }
            if (--count <= 0) {
              if (hasErr) {
                return cb(errors, results);
              } else {
                return cb(null, results);
              }
            }
          };
          try {
            return t(next);
          } catch (error) {
            e = error;
            return next(e);
          }
        })(t, i));
      }
      return results1;
    };

    Utils.prototype.runSeries = function(tasks, cb, force) {
      var count, errors, hasErr, i, next, results;
      if (tasks == null) {
        tasks = [];
      }
      if (cb == null) {
        cb = (function() {});
      }
      i = -1;
      count = tasks.length;
      results = [];
      if (count === 0) {
        return cb(null, results);
      }
      errors = [];
      hasErr = false;
      next = function() {
        var e, err, res;
        err = arguments[0], res = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (err) {
          errors[i] = err;
          hasErr = true;
          if (!force) {
            return cb(errors, results);
          }
        } else {
          if (i > -1) {
            results[i] = res.length < 2 ? res[0] : res;
          }
        }
        if (++i >= count) {
          if (hasErr) {
            return cb(errors, results);
          } else {
            return cb(null, results);
          }
        } else {
          try {
            return tasks[i](next);
          } catch (error) {
            e = error;
            return next(e);
          }
        }
      };
      return next();
    };

    Utils.prototype.runWaterfall = function(tasks, cb) {
      var i, next;
      i = -1;
      if (tasks.length === 0) {
        return cb();
      }
      next = function() {
        var err, res;
        err = arguments[0], res = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (err != null) {
          return cb(err);
        }
        if (++i >= tasks.length) {
          return cb.apply(null, [null].concat(slice.call(res)));
        } else {
          return tasks[i].apply(tasks, slice.call(res).concat([next]));
        }
      };
      return next();
    };

    Utils.prototype.doForAll = function(args, fn, cb, force) {
      var a, tasks;
      if (args == null) {
        args = [];
      }
      tasks = (function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = args.length; j < len; j++) {
          a = args[j];
          results1.push((function(a) {
            return function(next) {
              return fn(a, next);
            };
          })(a));
        }
        return results1;
      })();
      return runParallel(tasks, cb, force);
    };

    return Utils;

  })();

  angular.module('app_utils', []).service('utils', Utils);

}).call(this);

//# sourceMappingURL=utils.js.map
