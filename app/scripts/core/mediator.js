// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var mediator,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  mediator = angular.module('app_mediator', []).service('pubSub', function() {
    var _msgList, _msgScopeList, _publish, _scopes, _subscribe, _unsubscribe;
    _msgList = [];
    _msgScopeList = [];
    _scopes = [];
    _publish = function(obj) {
      var _flag, _msgScope, _scope, cb, data, e, i, j, l, len, len1, len2, msg, msgScope, n, scope, subscriber, subscribers;
      if (typeof obj.msg !== 'string') {
        return false;
      }
      cb = obj.callback != null ? obj.callback : function() {};
      _flag = 1;
      msg = obj.msg;
      for (j = 0, len = _msgScopeList.length; j < len; j++) {
        _msgScope = _msgScopeList[j];
        if (_msgList[_msgScope].hasOwnProperty(msg)) {
          _flag = 0;
          break;
        }
      }
      if (_flag === 1) {
        console.log('%cMEDIATOR: message not present in the list ' + msg, 'color: blue');
        cb();
        return false;
      }
      data = obj.data != null ? obj.data : void 0;
      if (obj.msgScope != null) {
        msgScope = obj.msgScope;
        if (msgScope instanceof Array) {
          _scopes = [];
          for (i = l = 0, len1 = msgScope.length; l < len1; i = ++l) {
            _scope = msgScope[i];
            if (_scope === 'all') {
              _scopes = _msgScopeList;
              break;
            }
            if (indexOf.call(_msgScopeList, _scope) >= 0) {
              _scopes.push(_scope);
            }
          }
          for (i in _scopes) {
            scope = _scopes[i];
            if (_msgList[scope].hasOwnProperty(msg)) {
              subscribers = _msgList[scope][msg];
              for (n = 0, len2 = subscribers.length; n < len2; n++) {
                subscriber = subscribers[n];
                try {
                  subscriber.func.apply(subscriber.context, [msg, data]);
                } catch (error) {
                  e = error;
                  throw e;
                }
              }
            } else {
              console.log('%cMEDIATOR: no cb\'s registered with this message' + msg, 'color: blue');
              _msgList[scope][msg] = [];
            }
          }
        } else {
          console.log('%cMEDIATOR: msgScope is not an Array instance' + msgScope, 'color: blue');
          throw new Error('msgScope is not an Array instance');
        }
      } else {
        throw new Error('msgScope is not defined');
      }
      cb();
      console.log('%cMEDIATOR: successfully published:' + obj.msg + ' MsgScope:' + obj.msgScope, 'color:blue');
      return this;
    };
    _subscribe = function(obj) {
      var _listenerIndex, _results, _scope, cb, context, j, k, l, len, len1, m, msg, msgScope, scopeInd, token, v;
      if (obj.msg != null) {
        msg = obj.msg;
      } else {
        return false;
      }
      cb = obj.listener != null ? obj.listener : function() {};
      context = obj.context != null ? obj.context : this;
      if (obj.msgScope != null) {
        msgScope = obj.msgScope;
        if (msgScope instanceof Array) {
          for (j = 0, len = msgScope.length; j < len; j++) {
            _scope = msgScope[j];
            if (indexOf.call(_msgScopeList, _scope) < 0) {
              _msgScopeList.push(_scope);
            }
          }
        } else {
          return false;
        }
      } else {
        return false;
      }
      if (msg instanceof Array) {
        _results = [];
        for (l = 0, len1 = msg.length; l < len1; l++) {
          m = msg[l];
          _results.push(_subscribe({
            msg: m,
            listener: cb,
            context: context,
            msgScope: msgScope
          }));
        }
        return this;
      } else if (msg instanceof Object) {
        _results = [];
        for (k in msg) {
          v = msg[k];
          _results.push(_subscribe({
            msg: k,
            listener: v,
            context: context,
            msgScope: msgScope
          }));
        }
        return _results;
      } else {
        if (typeof cb !== "function") {
          return false;
        }
        if (typeof msg !== "string") {
          return false;
        }
      }
      token = {};
      for (scopeInd in msgScope) {
        if (_msgList[msgScope[scopeInd]] == null) {
          _msgList[msgScope[scopeInd]] = {};
        }
        if (!_msgList[msgScope[scopeInd]].hasOwnProperty(msg)) {
          _msgList[msgScope[scopeInd]][msg] = [];
        }
        _listenerIndex = _msgList[msgScope[scopeInd]][msg].push({
          func: cb,
          context: context
        });
        token[msg] = token[msg] || {};
        token[msg][msgScope[scopeInd]] = _listenerIndex - 1;
        console.log('MEDIATOR: successfully subscribed: ' + msg);
      }
      return token;
    };
    _unsubscribe = function(tokens) {
      var indexToDel, msg, scope;
      if (tokens == null) {
        return false;
      }
      for (msg in tokens) {
        for (scope in tokens[msg]) {
          indexToDel = tokens[msg][scope];
          if (_msgList.hasOwnProperty(scope)) {
            if (_msgList[scope][msg] != null) {
              _msgList[scope][msg].splice(indexToDel, 1);
              console.log('MEDIATOR: successfully unsubscribed: ' + msg + ' of scope ' + scope);
              return true;
            }
          }
        }
      }
      return false;
    };
    return {
      publish: _publish,
      subscribe: _subscribe,
      unsubscribe: _unsubscribe
    };
  });

}).call(this);

//# sourceMappingURL=mediator.js.map
