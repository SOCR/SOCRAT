// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseService, ChartsStreamChart,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseService = require('scripts/BaseClasses/BaseService.coffee');

  module.exports = ChartsStreamChart = (function(superClass) {
    extend(ChartsStreamChart, superClass);

    function ChartsStreamChart() {
      return ChartsStreamChart.__super__.constructor.apply(this, arguments);
    }

    ChartsStreamChart.prototype.initialize = function() {};

    ChartsStreamChart.prototype.streamGraph = function(data, ranges, width, height, _graph, scheme) {
      var area, d, j, layers, len, nest, stack, x, xAxis, y, yAxis, z;
      x = d3.time.scale().range([0, width]);
      y = d3.scale.linear().range([height - 10, 0]);
      z = d3.scale.ordinal().range(scheme);
      console.log(scheme);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y);
      stack = d3.layout.stack().offset("silhouette").values(function(d) {
        return d.values;
      }).x(function(d) {
        return d.x;
      }).y(function(d) {
        return d.y;
      });
      nest = d3.nest().key(function(d) {
        return d.z;
      });
      console.log(data);
      area = d3.svg.area().interpolate("cardinal").x(function(d) {
        return x(d.x);
      }).y0(function(d) {
        return y(d.y0);
      }).y1(function(d) {
        return y(d.y0 + d.y);
      });
      for (j = 0, len = data.length; j < len; j++) {
        d = data[j];
        d.x = new Date(d.x);
        d.y = +d.y;
      }
      console.log(nest.entries(data));
      layers = stack(nest.entries(data));
      x.domain(d3.extent(data, function(d) {
        return d.x;
      }));
      y.domain([
        0, d3.max(data, function(d) {
          return d.y0 + d.y;
        })
      ]);
      console.log(layers);
      _graph.selectAll(".layer").data(layers).enter().append("path").attr("class", "layer").attr("d", function(d) {
        return area(d.values);
      }).style("fill", function(d, i) {
        return z(i);
      });
      _graph.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);
      _graph.append("g").attr("class", "y axis").attr("transform", "translate(" + width + ", 0)").call(yAxis.orient("right"));
      return _graph.append("g").attr("class", "y axis").call(yAxis.orient("left"));
    };

    return ChartsStreamChart;

  })(BaseService);

}).call(this);

//# sourceMappingURL=ChartsStreamChart.service.js.map
