// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseService, ChartsScatterPlot,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseService = require('scripts/BaseClasses/BaseService.coffee');

  module.exports = ChartsScatterPlot = (function(superClass) {
    extend(ChartsScatterPlot, superClass);

    function ChartsScatterPlot() {
      return ChartsScatterPlot.__super__.constructor.apply(this, arguments);
    }

    ChartsScatterPlot.prototype.initialize = function() {};

    ChartsScatterPlot.prototype.drawScatterPlot = function(data, ranges, width, height, _graph, container, gdata) {
      var padding, tooltip, x, xAxis, xMap, xValue, y, yAxis, yMap, yValue;
      padding = 50;
      x = d3.scale.linear().domain([ranges.xMin, ranges.xMax]).range([padding, width - padding]);
      y = d3.scale.linear().domain([ranges.yMin, ranges.yMax]).range([height - padding, padding]);
      xAxis = d3.svg.axis().scale(x).orient('bottom');
      yAxis = d3.svg.axis().scale(y).orient('left');
      xValue = function(d) {
        return parseFloat(d.x);
      };
      yValue = function(d) {
        return parseFloat(d.y);
      };
      xMap = function(d) {
        return x(xValue(d));
      };
      yMap = function(d) {
        return y(yValue(d));
      };
      _graph.append("g").attr("class", "x axis").attr('transform', 'translate(0,' + (height - padding) + ')').call(xAxis).style('font-size', '16px');
      _graph.append("g").attr("class", "y axis").attr('transform', 'translate(' + padding + ',0)').call(yAxis).style('font-size', '16px');
      _graph.selectAll('.x.axis path').style({
        'fill': 'none',
        'stroke': 'black',
        'shape-rendering': 'crispEdges',
        'stroke-width': '1px'
      });
      _graph.selectAll('.y.axis path').style({
        'fill': 'none',
        'stroke': 'black',
        'shape-rendering': 'crispEdges',
        'stroke-width': '1px'
      });
      _graph.selectAll('.x.axis text').attr('transform', function(d) {
        return 'translate(' + this.getBBox().height * -2 + ',' + this.getBBox().height + ')rotate(-40)';
      }).style('font-size', '16px');
      _graph.append('text').attr('class', 'label').attr('text-anchor', 'middle').attr('transform', 'translate(' + width + ',' + (height - padding / 2) + ')').text(gdata.xLab.value);
      _graph.append("text").attr('class', 'label').attr('text-anchor', 'middle').attr('transform', 'translate(0,' + padding / 2 + ')').text(gdata.yLab.value);
      tooltip = container.append('div').attr('class', 'tooltip');
      return _graph.selectAll('.dot').data(data).enter().append('circle').attr('class', 'dot').attr('r', 5).attr('cx', xMap).attr('cy', yMap).style('fill', 'DodgerBlue').attr('opacity', '0.5').on('mouseover', function(d) {
        tooltip.transition().duration(200).style('opacity', .9);
        return tooltip.html('<div style="background-color:white; padding:5px; border-radius: 5px">(' + xValue(d) + ',' + yValue(d) + ')</div>').style('left', d3.select(this).attr('cx') + 'px').style('top', d3.select(this).attr('cy') + 'px');
      }).on('mouseout', function(d) {
        return tooltip.transition().duration(500).style('opacity', 0);
      });
    };

    return ChartsScatterPlot;

  })(BaseService);

}).call(this);

//# sourceMappingURL=ChartsScatterPlot.service.js.map
