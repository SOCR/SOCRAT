// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseService, ChartsHistogram,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseService = require('scripts/BaseClasses/BaseService.coffee');

  module.exports = ChartsHistogram = (function(superClass) {
    extend(ChartsHistogram, superClass);

    function ChartsHistogram() {
      return ChartsHistogram.__super__.constructor.apply(this, arguments);
    }

    ChartsHistogram.prototype.initialize = function() {};

    ChartsHistogram.prototype.plotHist = function(bins, container, arr, _graph, gdata, x, height, width, data) {
      var bar, dataHist, getColor, padding, rect_width, xAxis, y, yAxis;
      $('#slidertext').remove();
      container.append('text').attr('id', 'slidertext').text('Bin Slider: ' + bins).attr('position', 'relative').attr('left', '50px');
      dataHist = d3.layout.histogram().bins(bins)(arr);
      _graph.selectAll('g').remove();
      _graph.select('.x axis').remove();
      _graph.select('.y axis').remove();
      padding = 50;
      x = d3.scale.linear().range([padding, width - padding]);
      y = d3.scale.linear().range([height - padding, padding]);
      console.log("bins");
      console.log(bins);
      console.log("arr");
      console.log(arr);
      console.log("data");
      console.log(data);
      x.domain([
        d3.min(data, function(d) {
          return parseFloat(d.x);
        }), d3.max(data, function(d) {
          return parseFloat(d.x);
        })
      ]);
      y.domain([
        0, d3.max(dataHist.map(function(i) {
          return i.length;
        }))
      ]);
      yAxis = d3.svg.axis().scale(y).orient("left");
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      getColor = d3.scale.category10();
      _graph.append("g").attr("class", "x axis").attr("transform", "translate(0," + (height - padding) + ")").call(xAxis).style('font-size', '16px');
      _graph.append("g").attr("class", "y axis").attr('transform', 'translate(' + padding + ',0)').call(yAxis).style('font-size', '16px');
      _graph.selectAll('.x.axis path').style({
        'fill': 'none',
        'stroke': 'black',
        'shape-rendering': 'crispEdges',
        'stroke-width': '1px'
      });
      _graph.selectAll('.y.axis path').style({
        'fill': 'none',
        'stroke': 'black',
        'shape-rendering': 'crispEdges',
        'stroke-width': '1px'
      });
      _graph.selectAll('.x.axis text').attr('transform', function(d) {
        return 'translate(' + this.getBBox().height * -2 + ',' + this.getBBox().height + ')rotate(-40)';
      }).style('font-size', '16px');
      _graph.append('text').attr('class', 'label').attr('text-anchor', 'middle').attr('transform', 'translate(' + width + ',' + (height - padding / 2) + ')').text(gdata.xLab.value);
      _graph.append("text").attr('class', 'label').attr('text-anchor', 'middle').attr('transform', 'translate(0,' + padding / 2 + ')').text("Counts");
      bar = _graph.selectAll('.bar').data(dataHist);
      bar.enter().append("g");
      rect_width = (width - 2 * padding) / bins;
      bar.append('rect').attr('x', function(d) {
        return x(d.x);
      }).attr('y', function(d) {
        return y(d.y);
      }).attr('width', rect_width).attr('height', function(d) {
        return Math.abs(height - y(d.y)) - padding;
      }).attr("stroke", "white").attr("stroke-width", 1).style('fill', getColor(0)).on('mouseover', function() {
        return d3.select(this).transition().style('fill', getColor(1));
      }).on('mouseout', function() {
        return d3.select(this).transition().style('fill', getColor(0));
      });
      return bar.append('text').attr('x', function(d) {
        return x(d.x);
      }).attr('y', function(d) {
        return (y(d.y)) - 25;
      }).attr('dx', function(d) {
        return .5 * rect_width;
      }).attr('dy', '20px').attr('fill', 'black').attr('text-anchor', 'middle').attr('z-index', 1).text(function(d) {
        return d.y;
      });
    };

    ChartsHistogram.prototype.drawHist = function(_graph, data, container, gdata, width, height, ranges) {
      var $slider, arr, bins;
      container.append('div').attr('id', 'slider');
      $slider = $("#slider");
      bins = 5;
      arr = data.map(function(d) {
        return parseFloat(d.x);
      });
      this.plotHist(bins, container, arr, _graph, gdata, x, height, width, data);
      if ($slider.length > 0) {
        $slider.slider({
          min: 1,
          max: 10,
          value: 5,
          orientation: "horizontal",
          range: "min",
          change: function() {}
        }).addSliderSegments($slider.slider("option").max);
      }
      return $slider.on("slidechange", (function(_this) {
        return function(event, ui) {
          bins = parseInt(ui.value);
          return _this.plotHist(bins, container, arr, _graph, gdata, x, height, width, data);
        };
      })(this));
    };

    return ChartsHistogram;

  })(BaseService);

}).call(this);

//# sourceMappingURL=ChartsHistogram.service.js.map
