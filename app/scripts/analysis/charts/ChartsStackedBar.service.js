// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseService, ChartsStackedBar,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseService = require('scripts/BaseClasses/BaseService.coffee');

  module.exports = ChartsStackedBar = (function(superClass) {
    extend(ChartsStackedBar, superClass);

    function ChartsStackedBar() {
      return ChartsStackedBar.__super__.constructor.apply(this, arguments);
    }

    ChartsStackedBar.prototype.initialize = function() {};

    ChartsStackedBar.prototype.stackedBar = function(data, ranges, width, height, _graph, gdata, container) {
      var d, i, j, len, len1, newData, obj, state, tooltip, x, xAxis, y, y0, yAxis, z;
      x = d3.scale.ordinal().rangeRoundBands([0, width], .1);
      y = d3.scale.linear().rangeRound([height, 0]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left").tickFormat(d3.format(".2s"));
      tooltip = container.append('div').attr('class', 'tooltip');
      z = d3.scale.ordinal().domain([gdata.xLab.value, gdata.yLab.value, gdata.zLab.value]).range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);
      newData = [];
      for (i = 0, len = data.length; i < len; i++) {
        d = data[i];
        obj = {};
        obj[gdata.xLab.value] = +d.x;
        obj[gdata.yLab.value] = +d.y;
        obj[gdata.zLab.value] = +d.z;
        newData.push(obj);
      }
      for (j = 0, len1 = newData.length; j < len1; j++) {
        d = newData[j];
        y0 = 0;
        d.ages = z.domain().map(function(name) {
          return {
            name: name,
            y0: y0,
            y1: y0 += +d[name]
          };
        });
        d.total = d.ages[d.ages.length - 1].y1;
      }
      newData.sort(function(a, b) {
        return b.total - a.total;
      });
      x.domain(newData.map(function(d) {
        return d[gdata.xLab.value];
      }));
      y.domain([
        0, d3.max(newData, function(d) {
          return d.total;
        })
      ]);
      _graph.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);
      _graph.append("g").attr("class", "y axis").call(yAxis);
      state = _graph.selectAll(".state").data(newData).enter().append("g").attr("class", "g").attr("transform", function(d) {
        return "translate(" + x(d[gdata.xLab.value]) + ",0)";
      });
      state.selectAll("rect").data(function(d) {
        return d.ages;
      }).enter().append("rect").attr("width", x.rangeBand()).attr("y", function(d) {
        return y(d.y1);
      }).attr("height", function(d) {
        return y(d.y0) - y(d.y1);
      }).style("fill", function(d) {
        return z(d.name);
      }).on('mouseover', function(d) {
        tooltip.transition().duration(200).style('opacity', .9);
        return tooltip.html('<div style="background-color:white; padding:5px; border-radius: 5px">' + d.name + ' ' + d.y1 + '</div>').style('left', d3.select(this).attr('x') + 'px').style('top', 50);
      }).on('mouseout', function(d) {
        return tooltip.transition().duration(500).style('opacity', 0);
      });
      return console.log(newData);
    };

    return ChartsStackedBar;

  })(BaseService);

}).call(this);

//# sourceMappingURL=ChartsStackedBar.service.js.map
