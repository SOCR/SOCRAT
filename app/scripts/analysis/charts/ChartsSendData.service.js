// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseService, ChartsSendData,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseService = require('scripts/BaseClasses/BaseService.coffee');

  module.exports = ChartsSendData = (function(superClass) {
    extend(ChartsSendData, superClass);

    function ChartsSendData() {
      return ChartsSendData.__super__.constructor.apply(this, arguments);
    }

    ChartsSendData.inject('app_analysis_charts_msgService');

    ChartsSendData.prototype.initialize = function() {
      return this.msgService = this.app_analysis_charts_msgService;
    };

    ChartsSendData.prototype.graphFormat = function(chartData, graphInfo, dataType) {
      var i, len, obj;
      console.log("dataType");
      console.log(dataType);
      if (dataType === "NESTED") {
        return chartData;
      } else {
        obj = [];
        len = chartData[0].length;
        if (graphInfo.y === "" && graphInfo.z === "") {
          obj = (function() {
            var j, ref, results1;
            results1 = [];
            for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
              results1.push({
                x: chartData[graphInfo.x][i].value
              });
            }
            return results1;
          })();
        } else if (graphInfo.y !== "" && graphInfo.z === "") {
          obj = (function() {
            var j, ref, results1;
            results1 = [];
            for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
              results1.push({
                x: chartData[graphInfo.x][i].value,
                y: chartData[graphInfo.y][i].value
              });
            }
            return results1;
          })();
        } else {
          obj = (function() {
            var j, ref, results1;
            results1 = [];
            for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
              results1.push({
                x: chartData[graphInfo.x][i].value,
                y: chartData[graphInfo.y][i].value,
                z: chartData[graphInfo.z][i].value
              });
            }
            return results1;
          })();
        }
        return obj;
      }
    };

    ChartsSendData.prototype.createGraph = function(chartData, graphInfo, headers, dataType, scheme_input) {
      var results, send, streamColor;
      streamColor = scheme_input;
      console.log(streamColor);
      send = this.graphFormat(chartData, graphInfo, dataType);
      results = {
        data: send,
        xLab: headers[graphInfo.x],
        yLab: headers[graphInfo.y],
        zLab: headers[graphInfo.z],
        name: graphInfo.graph
      };
      if (graphInfo.graph === "Stream Graph") {
        console.log("won't add property");
        results.scheme = streamColor;
      }
      return this.msgService.broadcast('charts:graphDiv', results);
    };

    return ChartsSendData;

  })(BaseService);

}).call(this);

//# sourceMappingURL=ChartsSendData.service.js.map
