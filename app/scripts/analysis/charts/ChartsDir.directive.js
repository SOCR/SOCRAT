// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseDirective, ChartsDir,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require('jquery-ui/ui/widgets/slider');

  BaseDirective = require('scripts/BaseClasses/BaseDirective');

  module.exports = ChartsDir = (function(superClass) {
    extend(ChartsDir, superClass);

    function ChartsDir() {
      return ChartsDir.__super__.constructor.apply(this, arguments);
    }

    ChartsDir.inject('app_analysis_charts_areaChart', 'app_analysis_charts_barChart', 'app_analysis_charts_bivariateLineChart', 'app_analysis_charts_bubbleChart', 'app_analysis_charts_histogram', 'app_analysis_charts_lineChart', 'app_analysis_charts_normalChart', 'app_analysis_charts_pieChart', 'app_analysis_charts_scatterPlot', 'app_analysis_charts_streamChart', 'app_analysis_charts_stackedBar', 'app_analysis_charts_tilfordTree', 'app_analysis_charts_treemap', 'app_analysis_charts_checkTime');

    ChartsDir.prototype.initialize = function() {
      this.bar = this.app_analysis_charts_barChart;
      this.bubble = this.app_analysis_charts_bubbleChart;
      this.histogram = this.app_analysis_charts_histogram;
      this.pie = this.app_analysis_charts_pieChart;
      this.scatterPlot = this.app_analysis_charts_scatterPlot;
      this.stackBar = this.app_analysis_charts_stackedBar;
      this.time = this.app_analysis_charts_checkTime;
      this.streamGraph = this.app_analysis_charts_streamChart;
      this.area = this.app_analysis_charts_areaChart;
      this.treemap = this.app_analysis_charts_treemap;
      this.line = this.app_analysis_charts_lineChart;
      this.bivariate = this.app_analysis_charts_bivariateLineChart;
      this.normal = this.app_analysis_charts_normalChart;
      this.pie = this.app_analysis_charts_pieChart;
      this.restrict = 'E';
      this.template = "<div class='graph-container' style='height: 600px'></div>";
      return this.link = (function(_this) {
        return function(scope, elem, attr) {
          var _graph, container, data, gdata, height, margin, numerics, ranges, svg, width;
          margin = {
            top: 10,
            right: 40,
            bottom: 50,
            left: 80
          };
          width = 750 - margin.left - margin.right;
          height = 500 - margin.top - margin.bottom;
          svg = null;
          data = null;
          _graph = null;
          container = null;
          gdata = null;
          ranges = null;
          numerics = ['integer', 'number'];
          $.fn.addSliderSegments = function(amount, orientation) {
            return this.each(function() {
              var i, j, output, ref, segment, segmentGap;
              if (orientation === "vertical") {
                output = '';
                for (i = j = 0, ref = amount - 2; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
                  output += '<div class="ui-slider-segment" style="top:' + 100 / (amount - 1) * i + '%;"></div>';
                }
                return $(this).prepend(output);
              } else {
                segmentGap = 100 / (amount - 1) + "%";
                segment = '<div class="ui-slider-segment" style="margin-left: ' + segmentGap + ';"></div>';
                return $(this).prepend(segment.repeat(amount - 2));
              }
            });
          };
          return scope.$watch('mainArea.chartData', function(newChartData) {
            var ref, ref1, ref2, ref3, ref4, ref5, scheme;
            if (newChartData) {
              gdata = newChartData.labels;
              data = newChartData.dataPoints;
              scheme = newChartData.graph;
              data = data.map(function(row) {
                return {
                  x: row[0],
                  y: row[1],
                  z: row[2]
                };
              });
              container = d3.select(elem.find('div')[0]);
              container.selectAll('*').remove();
              svg = container.append('svg').attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom);
              _graph = svg.append('g').attr("transform", "translate(" + margin.left + "," + margin.top + ")");
              ranges = {
                xMin: (ref = gdata.xLab.type, indexOf.call(numerics, ref) >= 0) ? d3.min(data, function(d) {
                  return parseFloat(d.x);
                }) : null,
                yMin: (ref1 = gdata.yLab.type, indexOf.call(numerics, ref1) >= 0) ? d3.min(data, function(d) {
                  return parseFloat(d.y);
                }) : null,
                zMin: (ref2 = gdata.zLab.type, indexOf.call(numerics, ref2) >= 0) ? d3.min(data, function(d) {
                  return parseFloat(d.z);
                }) : null,
                xMax: (ref3 = gdata.xLab.type, indexOf.call(numerics, ref3) >= 0) ? d3.max(data, function(d) {
                  return parseFloat(d.x);
                }) : null,
                yMax: (ref4 = gdata.yLab.type, indexOf.call(numerics, ref4) >= 0) ? d3.max(data, function(d) {
                  return parseFloat(d.y);
                }) : null,
                zMax: (ref5 = gdata.zLab.type, indexOf.call(numerics, ref5) >= 0) ? d3.max(data, function(d) {
                  return parseFloat(d.z);
                }) : null
              };
              switch (scheme.name) {
                case 'Bar Graph':
                  return _this.bar.drawBar(width, height, data, _graph, gdata);
                case 'Bubble Chart':
                  return _this.bubble.drawBubble(ranges, width, height, _graph, data, gdata, container);
                case 'Histogram':
                  return _this.histogram.drawHist(_graph, data, container, gdata, width, height, ranges);
                case 'Ring Chart':
                  _graph = svg.append('g').attr("transform", "translate(300,250)").attr("id", "remove");
                  return _this.pie.drawPie(data, width, height, _graph, false);
                case 'Scatter Plot':
                  return _this.scatterPlot.drawScatterPlot(data, ranges, width, height, _graph, container, gdata);
                case 'Stacked Bar Chart':
                  return _this.stackBar.stackedBar(data, ranges, width, height, _graph, gdata, container);
                case 'Stream Graph':
                  _this.time.checkTimeChoice(data);
                  return _this.streamGraph.streamGraph(data, ranges, width, height, _graph, scheme);
                case 'Area Chart':
                  _this.time.checkTimeChoice(data);
                  return _this.area.drawArea(height, width, _graph, data, gdata);
                case 'Treemap':
                  return _this.treemap.drawTreemap(svg, width, height, container, data);
                case 'Line Chart':
                  _this.time.checkTimeChoice(data);
                  return _this.line.lineChart(data, ranges, width, height, _graph, gdata, container);
                case 'Bivariate Area Chart':
                  _this.time.checkTimeChoice(data);
                  return _this.bivariate.bivariateChart(height, width, _graph, data, gdata);
                case 'Normal Distribution':
                  return _this.normal.drawNormalCurve(data, width, height, _graph);
                case 'Pie Chart':
                  _graph = svg.append('g').attr("transform", "translate(300,250)").attr("id", "remove");
                  return _this.pie.drawPie(data, width, height, _graph, true);
              }
            }
          });
        };
      })(this);
    };

    return ChartsDir;

  })(BaseDirective);

}).call(this);

//# sourceMappingURL=ChartsDir.directive.js.map
