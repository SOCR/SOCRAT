// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseCtrl, ChartsSidebarCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BaseCtrl = require('scripts/BaseClasses/BaseController.coffee');

  module.exports = ChartsSidebarCtrl = (function(superClass) {
    extend(ChartsSidebarCtrl, superClass);

    function ChartsSidebarCtrl() {
      return ChartsSidebarCtrl.__super__.constructor.apply(this, arguments);
    }

    ChartsSidebarCtrl.inject('$q', '$stateParams', 'app_analysis_charts_dataTransform', 'app_analysis_charts_list', 'app_analysis_charts_sendData', 'app_analysis_charts_checkTime', 'app_analysis_charts_dataService', 'app_analysis_charts_msgService', '$timeout');

    ChartsSidebarCtrl.prototype.initialize = function() {
      this.msgService = this.app_analysis_charts_msgService;
      this.dataService = this.app_analysis_charts_dataService;
      this.dataTransform = this.app_analysis_charts_dataTransform;
      this.list = this.app_analysis_charts_list;
      this.sendData = this.app_analysis_charts_sendData;
      this.checkTime = this.app_analysis_charts_checkTime;
      this.DATA_TYPES = this.dataService.getDataTypes();
      this.graphs = [];
      this.selectedGraph = null;
      this.dataFrame = null;
      this.dataType = null;
      this.cols = [];
      this.chosenCols = [];
      this.numericalCols = [];
      this.categoricalCols = [];
      this.xCol = null;
      this.yCol = null;
      this.zCol = null;
      this.stream = false;
      this.streamColors = [
        {
          name: "blue",
          scheme: ["#045A8D", "#2B8CBE", "#74A9CF", "#A6BDDB", "#D0D1E6", "#F1EEF6"]
        }, {
          name: "pink",
          scheme: ["#980043", "#DD1C77", "#DF65B0", "#C994C7", "#D4B9DA", "#F1EEF6"]
        }, {
          name: "orange",
          scheme: ["#B30000", "#E34A33", "#FC8D59", "#FDBB84", "#FDD49E", "#FEF0D9"]
        }
      ];
      return this.dataService.getData().then((function(_this) {
        return function(obj) {
          var dataFrame;
          if (obj.dataFrame && (obj.dataFrame.dataType != null)) {
            dataFrame = obj.dataFrame;
            switch (dataFrame.dataType) {
              case _this.DATA_TYPES.FLAT:
                _this.graphs = _this.list.getFlat();
                _this.selectedGraph = _this.graphs[0];
                _this.dataType = _this.DATA_TYPES.FLAT;
                _this.parseData(dataFrame);
                if (_this.checkTime.checkForTime(dataFrame.data)) {
                  return _this.graphs = _this.list.getTime();
                }
                break;
              case _this.DATA_TYPES.NESTED:
                _this.graphs = _this.list.getNested();
                _this.data = dataFrame.data;
                _this.dataType = _this.DATA_TYPES.NESTED;
                return _this.header = {
                  key: 0,
                  value: "initiate"
                };
            }
          }
        };
      })(this));
    };

    ChartsSidebarCtrl.prototype.parseData = function(data) {
      return this.dataService.inferDataTypes(data, (function(_this) {
        return function(resp) {
          if (resp && resp.dataFrame && resp.dataFrame.data) {
            _this.dataFrame = resp.dataFrame;
            _this.updateSidebarControls();
            return _this.updateDataPoints();
          }
        };
      })(this));
    };

    ChartsSidebarCtrl.prototype.updateSidebarControls = function(data) {
      var col, i, idx, j, len, len1, ref, ref1, yCol, zCol;
      if (data == null) {
        data = this.dataFrame;
      }
      this.cols = data.header;
      if (this.selectedGraph.x) {
        this.xCols = (function() {
          var i, len, ref, ref1, results;
          ref = this.cols;
          results = [];
          for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
            col = ref[idx];
            if (ref1 = data.types[idx], indexOf.call(this.selectedGraph.x, ref1) >= 0) {
              results.push(col);
            }
          }
          return results;
        }).call(this);
        this.xCol = this.xCols[0];
      }
      if (this.selectedGraph.y) {
        this.yCols = (function() {
          var i, len, ref, ref1, results;
          ref = this.cols;
          results = [];
          for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
            col = ref[idx];
            if (ref1 = data.types[idx], indexOf.call(this.selectedGraph.y, ref1) >= 0) {
              results.push(col);
            }
          }
          return results;
        }).call(this);
        ref = this.yCols;
        for (i = 0, len = ref.length; i < len; i++) {
          yCol = ref[i];
          if (yCol !== this.xCol) {
            this.yCol = yCol;
            break;
          }
        }
      }
      if (this.selectedGraph.z) {
        this.zCols = (function() {
          var j, len1, ref1, ref2, results;
          ref1 = this.cols;
          results = [];
          for (idx = j = 0, len1 = ref1.length; j < len1; idx = ++j) {
            col = ref1[idx];
            if (ref2 = data.types[idx], indexOf.call(this.selectedGraph.z, ref2) >= 0) {
              results.push(col);
            }
          }
          return results;
        }).call(this);
        ref1 = this.zCols;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          zCol = ref1[j];
          if (zCol !== this.xCol && zCol !== this.yCol) {
            this.zCol = zCol;
            break;
          }
        }
      }
      return this.$timeout((function(_this) {
        return function() {
          return _this.updateDataPoints();
        };
      })(this));
    };

    ChartsSidebarCtrl.prototype.updateDataPoints = function(data) {
      var ref, ref1, row, xCol, xType, yCol, yType, zCol, zType;
      if (data == null) {
        data = this.dataFrame;
      }
      ref = [this.xCol, this.yCol, this.zCol].map(function(x) {
        return data.header.indexOf(x);
      }), xCol = ref[0], yCol = ref[1], zCol = ref[2];
      ref1 = [xCol, yCol, zCol].map(function(x) {
        return data.types[x];
      }), xType = ref1[0], yType = ref1[1], zType = ref1[2];
      data = (function() {
        var i, len, ref2, results;
        ref2 = data.data;
        results = [];
        for (i = 0, len = ref2.length; i < len; i++) {
          row = ref2[i];
          results.push([row[xCol], row[yCol], row[zCol]]);
        }
        return results;
      })();
      return this.msgService.broadcast('charts:updateGraph', {
        dataPoints: data,
        graph: this.selectedGraph,
        labels: {
          xLab: {
            value: this.xCol,
            type: xType
          },
          yLab: {
            value: this.yCol,
            type: yType
          },
          zLab: {
            value: this.zCol,
            type: zType
          }
        }
      });
    };

    return ChartsSidebarCtrl;

  })(BaseCtrl);

}).call(this);

//# sourceMappingURL=ChartsSidebarCtrl.controller.js.map
