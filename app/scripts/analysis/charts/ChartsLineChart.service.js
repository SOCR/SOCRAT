// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseService, ChartsLineChart,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseService = require('scripts/BaseClasses/BaseService.coffee');

  module.exports = ChartsLineChart = (function(superClass) {
    extend(ChartsLineChart, superClass);

    function ChartsLineChart() {
      return ChartsLineChart.__super__.constructor.apply(this, arguments);
    }

    ChartsLineChart.prototype.initialize = function() {};

    ChartsLineChart.prototype.lineChart = function(data, ranges, width, height, _graph, gdata, container) {
      var bisectDate, d, d0, focus, j, len, line, tooltip, val, x, xAxis, y, yAxis;
      bisectDate = d3.bisector(function(d) {
        return d.x;
      }).left;
      for (j = 0, len = data.length; j < len; j++) {
        d = data[j];
        d.x = new Date(d.x);
        d.y = +d.y;
      }
      x = d3.time.scale().range([0, width]);
      y = d3.scale.linear().range([height, 0]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left");
      line = d3.svg.line().x(function(d) {
        return x(d.x);
      }).y(function(d) {
        return y(d.y);
      });
      focus = _graph.append("g").style("display", "none");
      x.domain(d3.extent(data, function(d) {
        return d.x;
      }));
      y.domain(d3.extent(data, function(d) {
        return d.y;
      }));
      _graph.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);
      _graph.append("g").attr("class", "y axis").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text(gdata.yLab.value);
      _graph.append("path").datum(data).attr("class", "line").attr("d", line);
      focus.append("circle").attr("class", "y").style("fill", "white").style("stroke", "steelblue").style("stroke-width", "3px").attr("r", 8);
      d0 = null;
      val = null;
      tooltip = container.append('div').attr('class', 'tooltip');
      ({
        mousemove: function() {
          var d1, i, ref, x0;
          x0 = x.invert(d3.mouse(this)[0]);
          i = bisectDate(data, x0, 1);
          d0 = data[i - 1];
          d1 = data[i];
          d = (ref = x0 - d0.x > d1.x - x0) != null ? ref : {
            d1: d0
          };
          console.log(d);
          focus.select("circle.y").attr("transform", "translate(" + x(d0.x) + "," + y(d0.y) + ")");
          val = y.invert(d3.mouse(this)[0]);
          return tooltip.html('<div style="background-color:white; padding:5px; border-radius: 5px">' + val + '</div>').style('top', height - y.invert(d3.mouse(this)[1]) + 'px').style('left', x.invert(d3.mouse(this)[0]) + 'px');
        }
      });
      return _graph.append("rect").attr("height", height).attr("width", width).style("fill", "none").style("pointer-events", "all").on("mouseover", function() {
        focus.style("display", null);
        console.log(val);
        return tooltip.transition().duration(200).style('opacity', .9);
      }).on("mouseout", function() {
        focus.style("display", "none");
        return tooltip.transition().duration(500).style('opacity', 0);
      }).on("mousemove", mousemove);
    };

    return ChartsLineChart;

  })(BaseService);

}).call(this);

//# sourceMappingURL=ChartsLineChart.service.js.map
