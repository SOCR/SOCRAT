// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseService, ChartsPieChart,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseService = require('scripts/BaseClasses/BaseService.coffee');

  module.exports = ChartsPieChart = (function(superClass) {
    extend(ChartsPieChart, superClass);

    function ChartsPieChart() {
      return ChartsPieChart.__super__.constructor.apply(this, arguments);
    }

    ChartsPieChart.prototype.initialize = function() {
      return this.valueSum = 0;
    };

    ChartsPieChart.prototype.makePieData = function(data) {
      var counts, currentVar, groupName, i, index, j, k, len, maxPiePieces, obj, pieMax, pieMin, rangeInt, ref, val;
      this.valueSum = 0;
      counts = {};
      if (!isNaN(data[0].x)) {
        pieMax = d3.max(data, function(d) {
          return parseFloat(d.x);
        });
        pieMin = d3.min(data, function(d) {
          return parseFloat(d.x);
        });
        maxPiePieces = 7;
        rangeInt = Math.ceil((pieMax - pieMin) / maxPiePieces);
        counts = {};
        for (j = 0, len = data.length; j < len; j++) {
          val = data[j];
          index = Math.floor((val.x - pieMin) / rangeInt);
          groupName = index + "-" + (index + rangeInt);
          counts[groupName] = counts[groupName] || 0;
          counts[groupName]++;
          this.valueSum++;
        }
      } else {
        for (i = k = 0, ref = data.length - 1; k <= ref; i = k += 1) {
          currentVar = data[i].x;
          counts[currentVar] = counts[currentVar] || 0;
          counts[currentVar]++;
          this.valueSum++;
        }
      }
      obj = d3.entries(counts);
      return obj;
    };

    ChartsPieChart.prototype.drawPie = function(data, width, height, _graph, pie) {
      var arc, arcOver, arcs, clickOn, color, formatted_data, handleClick, handleMouseOut, handleMouseOver, outerRadius, paths, radius, sum;
      radius = Math.min(width, height) / 2;
      outerRadius = radius;
      arc = d3.svg.arc().outerRadius(outerRadius).innerRadius(0);
      if (!pie) {
        arc.innerRadius(radius - 60);
      }
      color = d3.scale.category20c();
      arcOver = d3.svg.arc().outerRadius(radius + 10);
      if (!pie) {
        arcOver.innerRadius(radius - 50);
      }
      pie = d3.layout.pie().value(function(d) {
        return d.value;
      }).sort(null);
      formatted_data = this.makePieData(data);
      sum = this.valueSum;
      clickOn = (function() {
        var j, ref, results;
        results = [];
        for (j = 0, ref = formatted_data.length - 1; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--) {
          results.push(false);
        }
        return results;
      })();
      arcs = _graph.selectAll(".arc").data(pie(formatted_data)).enter().append('g').attr("class", "arc");
      paths = arcs.append('path').attr('d', arc).attr('fill', function(d) {
        return color(d.data.value);
      }).on('mouseover', handleMouseOver).on('mouseout', handleMouseOut).on('click', handleClick);
      handleMouseOver = function(d, i) {
        if (clickOn[i] === false) {
          d3.select(this).attr("stroke", "white").transition().attr("d", arcOver).attr("stroke-width", 3);
          return d3.select(this.parentNode).select('text').attr('font-weight', 'bold');
        }
      };
      handleMouseOut = function(d, i) {
        if (clickOn[i] === false) {
          d3.select(this).transition().attr('d', arc).attr("stroke", "none");
          return d3.select(this.parentNode).select('text').attr('font-weight', 'normal');
        }
      };
      handleClick = function(d, i) {
        if (clickOn[i] === true) {
          clickOn[i] = false;
          d3.select(this).transition().attr('d', arc).attr("stroke", 'none');
          return d3.select(this.parentNode).select('text').attr('font-weight', 'normal');
        } else {
          clickOn[i] = true;
          return d3.select(this).attr('stroke', 'white').transition().attr('d', arcOver).attr('stroke', 3);
        }
      };
      arcs.append('path').attr('d', arc).attr('fill', function(d) {
        return color(d.data.value);
      }).on('mouseover', handleMouseOver).on('mouseout', handleMouseOut).on('click', handleClick);
      return arcs.append('text').attr('class', 'text').attr('transform', function(d) {
        var c, desiredLabelRad, h, x, y;
        c = arc.centroid(d);
        x = c[0];
        y = c[1];
        h = Math.sqrt(x * x + y * y);
        desiredLabelRad = 220;
        return 'translate(' + (x / h * desiredLabelRad) + ',' + (y / h * desiredLabelRad) + ')';
      }).transition().text((function(_this) {
        return function(d) {
          return d.data.key + ' (' + parseFloat(100 * d.data.value / sum).toFixed(1) + '%)';
        };
      })(this)).style('font-size', '16px');
    };

    return ChartsPieChart;

  })(BaseService);

}).call(this);

//# sourceMappingURL=ChartsPieChart.service.js.map
