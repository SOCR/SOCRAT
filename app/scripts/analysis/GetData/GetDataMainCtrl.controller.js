// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseCtrl, GetDataMainCtrl,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BaseCtrl = require('scripts/BaseClasses/BaseController.coffee');

  require('handsontable/dist/handsontable.full.css');

  require('imports?Handsontable=handsontable/dist/handsontable.full.js!ng-handsontable/dist/ngHandsontable.js');

  module.exports = GetDataMainCtrl = (function(superClass) {
    extend(GetDataMainCtrl, superClass);

    function GetDataMainCtrl() {
      this.saveTableData = bind(this.saveTableData, this);
      return GetDataMainCtrl.__super__.constructor.apply(this, arguments);
    }

    GetDataMainCtrl.inject('$scope', '$state', 'app_analysis_getData_dataService', 'app_analysis_getData_showState', 'app_analysis_getData_jsonParser', 'app_analysis_getData_dataAdaptor', 'app_analysis_getData_inputCache', '$timeout');

    GetDataMainCtrl.prototype.initialize = function() {
      var e;
      this.d3 = require('d3');
      this.dataManager = this.app_analysis_getData_dataService;
      this.showStateService = this.app_analysis_getData_showState;
      this.inputCache = this.app_analysis_getData_inputCache;
      this.jsonParser = this.app_analysis_getData_jsonParser;
      this.dataAdaptor = this.app_analysis_getData_dataAdaptor;
      this.LARGE_DATA_SIZE = 20000;
      this.dataLoadedFromDb = false;
      this.largeData = false;
      this.maxRows = 1000;
      this.DATA_TYPES = this.dataManager.getDataTypes();
      this.states = ['grid', 'socrData', 'worldBank', 'generate', 'jsonParse'];
      this.defaultState = this.states[0];
      if (this.DATA_TYPES.FLAT != null) {
        this.dataType = this.DATA_TYPES.FLAT;
      }
      this.socrdataset = this.socrDatasets[0];
      this.colHeaders = true;
      this.file = null;
      this["interface"] = {};
      this.tableSettings = {
        rowHeaders: true,
        stretchH: "all",
        contextMenu: true,
        onAfterChange: this.saveTableData,
        onAfterCreateCol: this.saveTableData,
        onAfterCreateRow: this.saveTableData,
        onAfterRemoveCol: this.saveTableData,
        onAfterRemoveRow: this.saveTableData
      };
      try {
        this.stateService = this.showStateService.create(this.states, this);
        console.log(this.stateService);
      } catch (error) {
        e = error;
        console.log(e.message);
      }
      this.dataManager.getData().then((function(_this) {
        return function(obj) {
          if (obj.dataFrame && (obj.dataFrame.dataType != null)) {
            if (obj.dataFrame.dataType === _this.DATA_TYPES.FLAT) {
              _this.dataLoadedFromDb = true;
              _this.dataType = obj.dataFrame.dataType;
              return _this.$timeout(function() {
                _this.colHeaders = obj.dataFrame.header;
                return _this.tableData = obj.dataFrame.data;
              });
            } else {
              return console.log('NESTED DATASET');
            }
          } else {
            _this.tableData = [['Copy', 'paste', 'your', 'data', 'here']];
            _this.colHeaders = ['A', 'B', 'C', 'D', 'E'];
            return _this.stateService.set(_this.defaultState);
          }
        };
      })(this));
      this.$scope.$on('getData:updateShowState', (function(_this) {
        return function(obj, data) {
          _this.stateService.set(data);
          console.log(_this.showState);
          if (indexOf.call(_this.states.filter(function(x) {
            return x !== 'jsonParse';
          }), data) >= 0) {
            return _this.dataType = _this.DATA_TYPES.FLAT;
          }
        };
      })(this));
      this.$scope.$on('$viewContentLoaded', function() {
        return console.log('get data main div loaded');
      });
      return this.$scope.$watch((function(_this) {
        return function() {
          return _this.$scope.mainArea.file;
        };
      })(this), (function(_this) {
        return function(file) {
          var data, dataResults;
          if (file != null) {
            dataResults = _this.d3.csv.parseRows(file);
            data = _this.dataAdaptor.toDataFrame(dataResults);
            return _this.passReceivedData(data);
          }
        };
      })(this));
    };

    GetDataMainCtrl.prototype.checkDataSize = function(nRows, nCols) {
      if (nRows && nCols && nRows * nCols > this.LARGE_DATA_SIZE) {
        this.largeData = true;
        return this.maxRows = Math.floor(this.LARGE_DATA_SIZE / this.colHeaders.length) - 1;
      } else {
        this.largeData = false;
        return this.maxRows = 1000;
      }
    };

    GetDataMainCtrl.prototype.subsampleData = function() {
      var data, i, idx, subsample;
      subsample = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = this.maxRows; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          results.push(this.getRandomInt(0, this.tableData.length - 1));
        }
        return results;
      }).call(this);
      data = (function() {
        var j, len, ref, results;
        ref = subsample.sort((function(_this) {
          return function(a, b) {
            return a - b;
          };
        })(this));
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          idx = ref[j];
          results.push(this.tableData[idx]);
        }
        return results;
      }).call(this);
      return this.$timeout((function(_this) {
        return function() {
          _this.tableData = data;
          _this.largeData = false;
          return _this.saveTableData();
        };
      })(this));
    };

    GetDataMainCtrl.prototype.getRandomInt = function(min, max) {
      return Math.floor(Math.random() * (max - min)) + min;
    };

    GetDataMainCtrl.prototype.saveTableData = function() {
      var data;
      if (this.tableData != null) {
        if (this.dataLoadedFromDb) {
          return this.dataLoadedFromDb = false;
        } else {
          data = this.dataAdaptor.toDataFrame(this.tableData, this.colHeaders);
          this.checkDataSize(data.nRows, data.nCols);
          return this.inputCache.setData(data);
        }
      }
    };

    GetDataMainCtrl.prototype.passReceivedData = function(data) {
      if (data.dataType === this.DATA_TYPES.NESTED) {
        this.dataType = this.DATA_TYPES.NESTED;
        this.checkDataSize(data.nRows, data.nCols);
        return this.inputCache.setData(data);
      } else {
        data.dataType = this.DATA_TYPES.FLAT;
        this.dataType = this.DATA_TYPES.FLAT;
        return this.$timeout((function(_this) {
          return function() {
            _this.colHeaders = data.header;
            _this.tableData = data.data;
            return console.log('ht updated');
          };
        })(this));
      }
    };

    GetDataMainCtrl.prototype.socrDatasets = [
      {
        id: 'IRIS',
        name: 'Iris Flower Dataset'
      }, {
        id: 'KNEE_PAIN',
        name: 'Simulated SOCR Knee Pain Centroid Location Data'
      }, {
        id: 'CURVEDNESS_AD',
        name: 'Neuroimaging study of 27 of Global Cortical Surface Curvedness (27 AD, 35 NC and 42 MCI)'
      }, {
        id: 'PCV_SPECIES',
        name: 'Neuroimaging study of Prefrontal Cortex Volume across Species'
      }, {
        id: 'TURKIYE_STUDENT_EVAL',
        name: 'Turkiye Student Evaluation Data Set'
      }
    ];

    GetDataMainCtrl.prototype.getWB = function() {
      var url;
      if (this.size === void 0) {
        this.size = 100;
      }
      if (this.option === void 0) {
        this.option = '4.2_BASIC.EDU.SPENDING';
      }
      url = 'http://api.worldbank.org/countries/indicators/' + this.option + '?per_page=' + this.size + '&date=2011:2011&format=jsonp' + '&prefix=JSON_CALLBACK';
      return this.jsonParser.parse({
        url: url,
        type: 'worldBank'
      }).then((function(_this) {
        return function(data) {
          console.log('resolved');
          return _this.passReceivedData(data);
        };
      })(this), function(msg) {
        return console.log('rejected:' + msg);
      });
    };

    GetDataMainCtrl.prototype.getSocrData = function() {
      var url;
      switch (this.socrdataset.id) {
        case 'IRIS':
          url = 'datasets/iris.csv';
          break;
        case 'KNEE_PAIN':
          url = 'datasets/knee_pain_data.csv';
          break;
        case 'CURVEDNESS_AD':
          url = 'datasets/Global_Cortical_Surface_Curvedness_AD_NC_MCI.csv';
          break;
        case 'PCV_SPECIES':
          url = 'datasets/Prefrontal_Cortex_Volume_across_Species.csv';
          break;
        case 'TURKIYE_STUDENT_EVAL':
          url = 'datasets/Turkiye_Student_Evaluation_Data_Set.csv';
          break;
        default:
          url = 'https://www.googledrive.com/host//0BzJubeARG-hsMnFQLTB3eEx4aTQ';
      }
      return this.d3.text(url, (function(_this) {
        return function(dataResults) {
          var data;
          if ((dataResults != null ? dataResults.length : void 0) > 0) {
            dataResults = _this.d3.csv.parseRows(dataResults);
            data = _this.dataAdaptor.toDataFrame(dataResults);
            return _this.passReceivedData(data);
          } else {
            return console.log('GETDATA: request failed');
          }
        };
      })(this));
    };

    GetDataMainCtrl.prototype.getJsonByUrl = function(type) {
      return this.d3.json(this.jsonUrl, (function(_this) {
        return function(dataResults) {
          var _data, ref, res;
          if ((dataResults != null) && ((ref = Object.keys(dataResults)) != null ? ref.length : void 0) > 0) {
            res = _this.dataAdaptor.jsonToFlatTable(dataResults);
            if (res) {
              _data = _this.dataAdaptor.toDataFrame(res);
            } else {
              _data = {
                data: dataResults,
                dataType: _this.DATA_TYPES.NESTED
              };
            }
            return _this.passReceivedData(_data);
          } else {
            return console.log('GETDATA: request failed');
          }
        };
      })(this));
    };

    return GetDataMainCtrl;

  })(BaseCtrl);

}).call(this);

//# sourceMappingURL=GetDataMainCtrl.controller.js.map
