// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseService, GetDataJsonParser,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseService = require('scripts/BaseClasses/BaseService.coffee');


  /*
    @name: GetDataJsonParser
    @desc: jsonParser parses the json url input by the user.
    @deps : $q, $rootscope, $http
   */

  module.exports = GetDataJsonParser = (function(superClass) {
    extend(GetDataJsonParser, superClass);

    function GetDataJsonParser() {
      return GetDataJsonParser.__super__.constructor.apply(this, arguments);
    }

    GetDataJsonParser.inject('$q', '$rootScope', '$http');

    GetDataJsonParser.prototype.initialize = function() {};

    GetDataJsonParser.prototype.parse = function(opts) {
      var cb, deferred;
      if (opts == null) {
        return null;
      }
      deferred = this.$q.defer();
      console.log(deferred.promise);
      switch (opts.type) {
        case 'worldBank':
          cb = function(data, status) {
            var _col, _column, c, count, i, len, tree;
            _col = [];
            _column = [];
            tree = [];
            count = function(obj) {
              var e, i, key, len, ref;
              try {
                if (typeof obj === 'object' && obj !== null) {
                  ref = Object.keys(obj);
                  for (i = 0, len = ref.length; i < len; i++) {
                    key = ref[i];
                    tree.push(key);
                    count(obj[key]);
                    tree.pop();
                  }
                } else {
                  _col.push(tree.join('.'));
                }
                return _col;
              } catch (error) {
                e = error;
                console.log(e.message);
              }
              return true;
            };
            count(data[1][0]);
            for (i = 0, len = _col.length; i < len; i++) {
              c = _col[i];
              _column.push({
                data: c
              });
            }
            return {
              data: data,
              columns: _column,
              columnHeader: _col,
              purpose: 'json'
            };
          };
          break;
        default:
          cb = function(data, status) {
            console.log(data);
            return data;
          };
      }
      this.$rootScope.$broadcast('app:push notification', {
        initial: {
          msg: 'Asking worldbank...',
          type: 'alert-info'
        },
        success: {
          msg: 'Successfully loaded data.',
          type: 'alert-success'
        },
        failure: {
          msg: 'Error in the call.',
          type: 'alert-error'
        },
        promise: deferred.promise
      });
      this.$http.jsonp(opts.url).success(function(data, status) {
        var formattedData;
        console.log('deferred.promise');
        formattedData = cb(data, status);
        return deferred.resolve(formattedData);
      }).error(function(data, status) {
        console.log('promise rejected');
        return deferred.reject('promise is rejected');
      });
      return deferred.promise;
    };

    return GetDataJsonParser;

  })(BaseService);

}).call(this);

//# sourceMappingURL=GetDataJsonParser.service.js.map
