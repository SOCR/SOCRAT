// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseService, GetDataDataAdaptor,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseService = require('scripts/BaseClasses/BaseService.coffee');


  /*
    @name: GetDataDataAdaptor
    @desc: Reformats data from input table format to the universal DataFrame object
   */

  module.exports = GetDataDataAdaptor = (function(superClass) {
    extend(GetDataDataAdaptor, superClass);

    function GetDataDataAdaptor() {
      return GetDataDataAdaptor.__super__.constructor.apply(this, arguments);
    }

    GetDataDataAdaptor.inject('app_analysis_getData_msgService');

    GetDataDataAdaptor.prototype.initialize = function() {
      this.eventManager = this.app_analysis_getData_msgService;
      return this.DATA_TYPES = this.eventManager.getSupportedDataTypes();
    };

    GetDataDataAdaptor.prototype.typeIsArray = Array.isArray || function(value) {
      return {}.toString.call(value) === '[object Array]';
    };

    GetDataDataAdaptor.prototype.haveSameKeys = function(obj1, obj2) {
      var k, res;
      if (Object.keys(obj1).length === Object.keys(obj2).length) {
        res = (function() {
          var results;
          results = [];
          for (k in obj1) {
            results.push(k in obj2);
          }
          return results;
        })();
        return res.every(function(e) {
          return e === true;
        });
      } else {
        return false;
      }
    };

    GetDataDataAdaptor.prototype.isNumStringArray = function(arr) {
      console.log(arr);
      return arr.every(function(el) {
        var ref;
        return (ref = typeof el) === 'number' || ref === 'string';
      });
    };

    GetDataDataAdaptor.prototype.toDataFrame = function(tableData, header) {
      var dataFrame;
      if (header == null) {
        header = false;
      }
      if (!header) {
        header = tableData.length > 1 ? tableData.shift() : [];
      }
      return dataFrame = {
        header: header,
        nRows: tableData.length,
        nCols: tableData[0].length,
        data: tableData,
        dataType: this.DATA_TYPES.FLAT,
        purpose: 'json'
      };
    };

    GetDataDataAdaptor.prototype.toHandsontable = function() {};

    GetDataDataAdaptor.prototype.jsonToFlatTable = function(data) {
      var cols, i, ks, row, sk, subKs, t, vals;
      if ((data != null) && typeof data === 'object') {
        if (this.typeIsArray(data)) {
          if (!(data.every(function(el) {
            return typeof el === 'object';
          }))) {
            if (data.every(function(el) {
              var ref;
              return (ref = typeof el) === 'number' || ref === 'string';
            })) {
              return data;
            }
          } else {
            if (data.every(function(el) {
              return this.typeIsArray(el);
            })) {
              if (data.every(function(col) {
                return col.every(function(el) {
                  var ref;
                  return (ref = typeof el) === 'number' || ref === 'string';
                });
              })) {
                return data;
              } else {
                return false;
              }
            } else {
              if (!!data.reduce(function(prev, next) {
                var nextValues, prevValues;
                if (this.haveSameKeys(prev, next)) {
                  prevValues = Object.keys(prev).map(function(k) {
                    return prev[k];
                  });
                  nextValues = Object.keys(prev).map(function(k) {
                    return next[k];
                  });
                  if ((prevValues.length === nextValues.length) && (this.isNumStringArray(prevValues)) && (this.isNumStringArray(nextValues))) {
                    return next;
                  } else {
                    return 0/0;
                  }
                } else {
                  return 0/0;
                }
              })) {
                cols = Object.keys(data[0]);
                data = (function() {
                  var j, len, results;
                  results = [];
                  for (j = 0, len = data.length; j < len; j++) {
                    row = data[j];
                    results.push(cols.map(function(col) {
                      return row[col];
                    }));
                  }
                  return results;
                })();
                data.splice(0, 0, cols);
                return data;
              } else {
                return false;
              }
            }
          }
        } else {
          ks = Object.keys(data);
          vals = ks.map(function(k) {
            return data[k];
          });
          if (vals.every(function(el) {
            var ref;
            return (ref = typeof el) === 'number' || ref === 'string';
          })) {
            return data = [ks, vals];
          } else if (vals.every(function(el) {
            return typeof el === 'object';
          })) {
            if ((vals.every(function(row) {
              return this.typeIsArray(row);
            })) && (vals.every(function(row) {
              return row.every(function(el) {
                var ref;
                return (ref = typeof el) === 'number' || ref === 'string';
              });
            }))) {
              vals = (function() {
                var results;
                results = [];
                for (i in vals) {
                  results.push((function() {
                    var j, len, results1;
                    results1 = [];
                    for (j = 0, len = vals.length; j < len; j++) {
                      t = vals[j];
                      results1.push(t[i]);
                    }
                    return results1;
                  })());
                }
                return results;
              })();
              vals.splice(0, 0, ks);
              vals;
            } else {

            }
            if (!!vals.reduce(function(prev, next) {
              var nextValues, prevValues;
              if (this.haveSameKeys(prev, next)) {
                prevValues = Object.keys(prev).map(function(k) {
                  return prev[k];
                });
                nextValues = Object.keys(prev).map(function(k) {
                  return next[k];
                });
                if ((prevValues.length === nextValues.length) && (this.isNumStringArray(prevValues)) && (this.isNumStringArray(nextValues))) {
                  return next;
                } else {
                  return 0/0;
                }
              } else {
                return 0/0;
              }
            })) {
              subKs = Object.keys(vals[0]);
              data = (function() {
                var j, len, results;
                results = [];
                for (j = 0, len = subKs.length; j < len; j++) {
                  sk = subKs[j];
                  results.push([sk].concat(vals.map(function(val) {
                    return val[sk];
                  })));
                }
                return results;
              })();
              data.splice(0, 0, [""].concat(ks));
              return data;
            }
          } else {
            return false;
          }
        }
      }
    };

    return GetDataDataAdaptor;

  })(BaseService);

}).call(this);

//# sourceMappingURL=GetDataDataAdaptor.service.js.map
