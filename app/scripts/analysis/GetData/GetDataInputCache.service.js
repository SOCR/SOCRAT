// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseService, GetDataInputCache,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseService = require('scripts/BaseClasses/BaseService.coffee');


  /*
    @name: app_analysis_getData_inputCache
    @type: service
    @desc: Caches data. Changes to handsontable is stored here
    and synced after some time. Changes in db is heard and reflected on
    handsontable.
   */

  module.exports = GetDataInputCache = (function(superClass) {
    extend(GetDataInputCache, superClass);

    function GetDataInputCache() {
      return GetDataInputCache.__super__.constructor.apply(this, arguments);
    }

    GetDataInputCache.inject('$q', '$stateParams', '$timeout', 'app_analysis_getData_msgService', 'app_analysis_getData_dataService');

    GetDataInputCache.prototype.initialize = function() {
      this.msgManager = this.app_analysis_getData_msgService;
      this.dataService = this.app_analysis_getData_dataService;
      this.DATA_TYPES = this.msgManager.getSupportedDataTypes();
      this.data = {};
      this.timer = null;
      return this.ht = null;
    };

    GetDataInputCache.prototype.getData = function() {
      return this.data;
    };

    GetDataInputCache.prototype.saveDataToDb = function(data, deferred) {
      var msgEnding;
      msgEnding = data.dataType === this.DATA_TYPES.FLAT ? ' as 2D data table' : ' as hierarchical object';
      this.msgManager.broadcast('app:push notification', {
        initial: {
          msg: 'Data is being saved in the database...',
          type: 'alert-info'
        },
        success: {
          msg: 'Successfully loaded data into database' + msgEnding,
          type: 'alert-success'
        },
        failure: {
          msg: 'Error in Database',
          type: 'alert-error'
        },
        promise: deferred.promise
      });
      return this.dataService.saveData(this.dataService.saveDataMsg, function() {
        return console.log('handsontable data updated to db');
      }, data, deferred);
    };

    GetDataInputCache.prototype.setData = function(data) {
      console.log('%c inputCache set called for the project ' + this.$stateParams.projectId + ':' + this.$stateParams.forkId, 'color:steelblue');
      if ((data != null) || (this.$stateParams.projectId != null) || (this.$stateParams.forkId != null)) {
        if (data !== 'edit') {
          this.data = data;
        }
        clearTimeout(this.timer);
        this.deferred = this.$q.defer();
        this.timer = this.$timeout(((function(_this) {
          return function(data, deferred) {
            return _this.saveDataToDb(data, deferred);
          };
        })(this))(this.data, this.deferred), 1000);
        return true;
      } else {
        console.log("no data passed to inputCache");
        return false;
      }
    };

    GetDataInputCache.prototype.pushData = function(data) {
      return this.ht.loadData(data);
    };

    return GetDataInputCache;

  })(BaseService);

}).call(this);

//# sourceMappingURL=GetDataInputCache.service.js.map
