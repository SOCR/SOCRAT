// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseCtrl, GetDataSidebarCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseCtrl = require('scripts/BaseClasses/BaseController.coffee');

  module.exports = GetDataSidebarCtrl = (function(superClass) {
    extend(GetDataSidebarCtrl, superClass);

    function GetDataSidebarCtrl() {
      return GetDataSidebarCtrl.__super__.constructor.apply(this, arguments);
    }

    GetDataSidebarCtrl.inject('$scope', '$q', '$stateParams', 'app_analysis_getData_msgService', 'app_analysis_getData_jsonParser', 'app_analysis_getData_inputCache');

    GetDataSidebarCtrl.prototype.initialize = function() {
      this.eventManager = this.app_analysis_getData_msgService;
      this.inputCache = this.app_analysis_getData_inputCache;
      this.jsonParser = this.app_analysis_getData_jsonParser;
      this.jsonUrl = '';
      this.flag = true;
      this.selected = 'getDataGrid';
      return this.DATA_TYPES = this.eventManager.getSupportedDataTypes();
    };

    GetDataSidebarCtrl.prototype.passReceivedData = function(data) {
      if (data.dataType === this.DATA_TYPES.NESTED) {

      } else {
        data.dataType = this.DATA_TYPES.FLAT;
      }
      return this.inputCache.setData(data);
    };

    GetDataSidebarCtrl.prototype.show = function(val) {
      switch (val) {
        case 'grid':
          this.selected = 'getDataGrid';
          return this.eventManager.broadcast('getData:updateShowState', 'grid');
        case 'socrData':
          this.selected = 'getDataSocrData';
          return this.eventManager.broadcast('getData:updateShowState', 'socrData');
        case 'worldBank':
          this.selected = 'getDataWorldBank';
          return this.eventManager.broadcast('getData:updateShowState', 'worldBank');
        case 'generate':
          this.selected = 'getDataGenerate';
          return this.eventManager.broadcast('getData:updateShowState', 'generate');
        case 'jsonParse':
          this.selected = 'getDataJson';
          return this.eventManager.broadcast('getData:updateShowState', 'jsonParse');
      }
    };

    GetDataSidebarCtrl.prototype.getJson = function() {
      console.log(this.jsonUrl);
      if (this.jsonUrl === '') {
        return false;
      }
      return this.jsonParser.parse({
        url: this.jsonUrl,
        type: 'worldBank'
      }).then(function(data) {
        this.passReceivedData(data);
        return this.$scope.$emit('get Data from handsontable', inputCache);
      }, function(msg) {
        return console.log('rejected');
      });
    };

    GetDataSidebarCtrl.prototype.getUrl = function() {};

    GetDataSidebarCtrl.prototype.getGrid = function() {};

    return GetDataSidebarCtrl;

  })(BaseCtrl);

}).call(this);

//# sourceMappingURL=GetDataSidebarCtrl.controller.js.map
