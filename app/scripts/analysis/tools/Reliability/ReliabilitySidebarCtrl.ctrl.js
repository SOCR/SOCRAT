// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseCtrl, ReliabilitySidebarCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require('jquery-ui/ui/widgets/slider');

  BaseCtrl = require('scripts/BaseClasses/BaseController.coffee');

  module.exports = ReliabilitySidebarCtrl = (function(superClass) {
    extend(ReliabilitySidebarCtrl, superClass);

    function ReliabilitySidebarCtrl() {
      return ReliabilitySidebarCtrl.__super__.constructor.apply(this, arguments);
    }

    ReliabilitySidebarCtrl.inject('app_analysis_reliability_dataService', 'app_analysis_reliability_msgService', 'app_analysis_reliability_tests', '$scope', '$timeout');

    ReliabilitySidebarCtrl.prototype.initialize = function() {
      this.dataService = this.app_analysis_reliability_dataService;
      this.msgService = this.app_analysis_reliability_msgService;
      this.DATA_TYPES = this.dataService.getDataTypes();
      this.tests = this.app_analysis_reliability_tests;
      this.nCols = '5';
      this.nRows = '5';
      this.confLevel = 0.95;
      this.sliderTooltipIsOpen = false;
      this.perfeval = false;
      this.dataType = null;
      this.intCols = [];
      this.chosenCols = [];
      this.metric = null;
      this.metrics = this.tests.getMetricNames();
      this.dataFrame = null;
      this.initConfLevelSlider();
      return this.dataService.getData().then((function(_this) {
        return function(obj) {
          if (obj.dataFrame && (obj.dataFrame.dataType != null) && obj.dataFrame.dataType === _this.DATA_TYPES.FLAT) {
            _this.dataType = _this.DATA_TYPES.FLAT;
            _this.msgService.broadcast('reliability:updateDataType', obj.dataFrame.dataType);
            return _this.parseData(obj);
          } else {
            return _this.dataType = _this.DATA_TYPES.NESTED;
          }
        };
      })(this));
    };

    ReliabilitySidebarCtrl.prototype.initConfLevelSlider = function() {
      var $slider;
      $.fn.addSliderSegments = function(amount, orientation) {
        return this.each(function() {
          var i, j, output, ref, segment, segmentGap;
          if (orientation === "vertical") {
            output = '';
            for (i = j = 0, ref = amount - 2; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
              output += '<div class="ui-slider-segment" style="top:' + 100 / (amount - 1) * i + '%;"></div>';
            }
            return $(this).prepend(output);
          } else {
            segmentGap = 100 / (amount - 1) + "%";
            segment = '<div class="ui-slider-segment" style="margin-left: ' + segmentGap + ';"></div>';
            return $(this).prepend(segment.repeat(amount - 2));
          }
        });
      };
      $slider = $("#slider");
      if ($slider.length > 0) {
        return $slider.slider({
          min: 90,
          max: 99,
          value: 95,
          orientation: "horizontal",
          range: "min",
          slide: (function(_this) {
            return function(event, ui) {
              return _this.$timeout(function() {
                return _this.confLevel = ui.value / 100;
              });
            };
          })(this)
        }).addSliderSegments($slider.slider("option").max);
      }
    };

    ReliabilitySidebarCtrl.prototype.updateMetric = function() {
      var res;
      res = this.processData(this.dataFrame);
      return this.msgService.broadcast('reliability:showResults', {
        metric: this.metric,
        data: res
      });
    };

    ReliabilitySidebarCtrl.prototype.parseData = function(obj) {
      return this.dataService.inferDataTypes(obj.dataFrame, (function(_this) {
        return function(resp) {
          var col, cols, idx, res;
          if (resp && resp.dataFrame) {
            _this.dataFrame = resp.dataFrame;
            cols = _this.dataFrame.header;
            _this.intCols = (function() {
              var j, len, results;
              results = [];
              for (idx = j = 0, len = cols.length; j < len; idx = ++j) {
                col = cols[idx];
                if (this.dataFrame.types[idx] === 'integer') {
                  results.push(col);
                }
              }
              return results;
            }).call(_this);
            res = _this.processData(_this.dataFrame);
            return _this.msgService.broadcast('reliability:showResults', {
              metric: _this.metric,
              data: res
            });
          }
        };
      })(this));
    };

    ReliabilitySidebarCtrl.prototype.processData = function(obj) {
      var chosenIdxs, data, res, row;
      if (obj == null) {
        obj = this.dataFrame;
      }
      if (this.chosenCols.length === 0) {
        if (this.intCols.length > 0) {
          this.chosenCols = this.intCols;
        } else {
          return false;
        }
      }
      this.perfeval = true;
      chosenIdxs = this.chosenCols.map(function(x) {
        return obj.header.indexOf(x);
      });
      data = (function() {
        var j, len, ref, results;
        ref = obj.data;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          row = ref[j];
          results.push(row.filter(function(el, idx) {
            return indexOf.call(chosenIdxs, idx) >= 0;
          }));
        }
        return results;
      })();
      res = this.tests.calculateMetric(this.metric, data, this.confLevel);
      this.perfeval = false;
      return res;
    };

    return ReliabilitySidebarCtrl;

  })(BaseCtrl);

}).call(this);

//# sourceMappingURL=ReliabilitySidebarCtrl.ctrl.js.map
