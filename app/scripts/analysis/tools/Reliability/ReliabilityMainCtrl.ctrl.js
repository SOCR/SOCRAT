// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseCtrl, ReliabilityMainCtrl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseCtrl = require('scripts/BaseClasses/BaseController.coffee');

  module.exports = ReliabilityMainCtrl = (function(superClass) {
    extend(ReliabilityMainCtrl, superClass);

    function ReliabilityMainCtrl() {
      return ReliabilityMainCtrl.__super__.constructor.apply(this, arguments);
    }

    ReliabilityMainCtrl.inject('app_analysis_reliability_dataService', 'app_analysis_reliability_tests', '$timeout', '$scope');

    ReliabilityMainCtrl.prototype.initialize = function() {
      var e, i, len, metric, ref;
      this.dataService = this.app_analysis_reliability_dataService;
      this.DATA_TYPES = this.dataService.getDataTypes();
      this.tests = this.app_analysis_reliability_tests;
      this.dataType = '';
      this.result = '';
      this.showMetric = {};
      this.metrics = this.tests.getMetricNames().map(function(metric) {
        return metric.toLowerCase().replace(/[^\w\s]/gi, '');
      });
      ref = this.metrics;
      for (i = 0, len = ref.length; i < len; i++) {
        metric = ref[i];
        this.showMetric[metric] = true;
      }
      try {
        $('.socrat-reliability-metric').each((function(_this) {
          return function(idx, el) {
            console.log(el);
            try {
              $(el).attr("uib-collapse", "mainArea.showMetric['" + _this.metrics[idx] + "']");
            } catch (error) {}
            return console.log($(el).attr());
          };
        })(this));
      } catch (error) {
        e = error;
        console.log('ERROR' + e);
      }
      this.setShowMetric(this.metrics[0]);
      this.$scope.$on('reliability:updateDataType', (function(_this) {
        return function(event, dataType) {
          return _this.dataType = dataType;
        };
      })(this));
      return this.$scope.$on('reliability:showResults', (function(_this) {
        return function(event, obj) {
          _this.setShowMetric(obj.metric.toLowerCase().replace(/[^\w\s]/gi, ''));
          return _this.showResults(obj.data);
        };
      })(this));
    };

    ReliabilityMainCtrl.prototype.setShowMetric = function(metric) {
      var key, results;
      results = [];
      for (key in this.showMetric) {
        results.push(this.showMetric[key] = metric !== key);
      }
      return results;
    };

    ReliabilityMainCtrl.prototype.prettifyArrayOutput = function(arr) {
      if (arr != null) {
        arr = arr.map(function(x) {
          return x.toFixed(3);
        });
        return '[' + arr.toString().split(',').join('; ') + ']';
      }
    };

    ReliabilityMainCtrl.prototype.showResults = function(res) {
      var cAlpha;
      if (!isNaN(Number(res))) {
        return this.result = Number(res).toFixed(3);
      } else if (res.confIntervals) {
        cAlpha = Number(res.cAlpha);
        if (!isNaN(cAlpha)) {
          this.result = Number(res.cAlpha).toFixed(3);
          this.cronAlphaIdInterval = this.prettifyArrayOutput(res.confIntervals.id);
          this.cronAlphaKfInterval = this.prettifyArrayOutput(res.confIntervals.kf);
          this.cronAlphaLogitInterval = this.prettifyArrayOutput(res.confIntervals.logit);
          this.cronAlphaBootstrapInterval = this.prettifyArrayOutput(res.confIntervals.bootstrap);
          return this.cronAlphaAdfInterval = this.prettifyArrayOutput(res.confIntervals.adf);
        } else {
          return this.result = 'ERROR';
        }
      } else if (typeof res === 'string') {
        return this.result = res;
      } else {
        return this.result = 'ERROR';
      }
    };

    return ReliabilityMainCtrl;

  })(BaseCtrl);

}).call(this);

//# sourceMappingURL=ReliabilityMainCtrl.ctrl.js.map
