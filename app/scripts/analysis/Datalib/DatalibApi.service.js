// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseModuleInitService, DatalibApi,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModuleInitService = require('scripts/BaseClasses/BaseModuleInitService.coffee');

  module.exports = DatalibApi = (function(superClass) {
    extend(DatalibApi, superClass);

    function DatalibApi() {
      this.inferAll = bind(this.inferAll, this);
      this.inferType = bind(this.inferType, this);
      return DatalibApi.__super__.constructor.apply(this, arguments);
    }

    DatalibApi.inject('$q', '$timeout', 'app_analysis_datalib_dataAdaptor', 'app_analysis_datalib_msgService', 'app_analysis_datalib_wrapper');

    DatalibApi.prototype.initialize = function() {
      this.eventManager = this.app_analysis_datalib_msgService;
      this.dataAdaptor = this.app_analysis_datalib_dataAdaptor;
      this.dl = this.app_analysis_datalib_wrapper;
      return this.DATA_TYPES = null;
    };

    DatalibApi.prototype.initDl = function() {
      return this.$timeout((function(_this) {
        return function() {
          _this.DATA_TYPES = _this.eventManager.getSupportedDataTypes();
          console.log(_this.dl);
          if (_this.setDlListeners()) {
            return console.log('Datalib: ready');
          } else {
            return console.log('Datalib: failed to start');
          }
        };
      })(this));
    };

    DatalibApi.prototype.inferType = function(obj) {
      var colData, data, types;
      if ((obj.dataFrame != null) && obj.dataFrame.dataType === this.DATA_TYPES.FLAT) {
        colData = this.dataAdaptor.toColTable(obj.dataFrame);
        types = this.dl.typeInfer(colData.map(function(col) {
          return col.values;
        }));
        colData = colData.map(function(col, i) {
          return col.type = types.i;
        });
        return data = this.dataAdaptor.toDataFrame(colData);
      } else {
        return false;
      }
    };

    DatalibApi.prototype.inferAll = function(obj) {
      var dataFrame, types;
      if ((obj.dataFrame != null) && obj.dataFrame.dataType === this.DATA_TYPES.FLAT) {
        dataFrame = obj.dataFrame;
        types = this.dl.typeInferAll(dataFrame.data);
        dataFrame.types = dataFrame.types.map(function(type, i) {
          return type = types[i];
        });
        return dataFrame;
      } else {
        return false;
      }
    };

    DatalibApi.prototype.setDlListeners = function() {
      var methods, msgList;
      msgList = this.eventManager.getMsgList();
      methods = [
        {
          incoming: msgList.incoming[0],
          outgoing: msgList.outgoing[0],
          event: this.inferType
        }, {
          incoming: msgList.incoming[1],
          outgoing: msgList.outgoing[1],
          event: this.inferAll
        }
      ];
      return {
        status: methods.map((function(_this) {
          return function(method) {
            return _this.eventManager.subscribe(method['incoming'], function(msg, obj) {
              var data;
              data = method.event.apply(null, [obj]);
              return _this.eventManager.publish(method['outgoing'], function() {}, data);
            });
          };
        })(this))
      };
    };

    return DatalibApi;

  })(BaseModuleInitService);

}).call(this);

//# sourceMappingURL=DatalibApi.service.js.map
