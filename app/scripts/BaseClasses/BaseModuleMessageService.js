// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseModuleMessageService, BaseService,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BaseService = require('scripts/BaseClasses/BaseService.coffee');


  /*
    @name BaseModuleMessageService
    @desc Base class for module messaging service
   */

  module.exports = BaseModuleMessageService = (function(superClass) {
    extend(BaseModuleMessageService, superClass);

    function BaseModuleMessageService() {
      return BaseModuleMessageService.__super__.constructor.apply(this, arguments);
    }

    BaseModuleMessageService.inject('$q', '$rootScope', '$stateParams');

    BaseModuleMessageService.prototype.initialize = function() {
      return this.sb = null;
    };

    BaseModuleMessageService.prototype.setSb = function(sb) {
      return this.sb = sb;
    };

    BaseModuleMessageService.prototype.getMsgList = function() {
      return this.msgList;
    };

    BaseModuleMessageService.prototype.getSupportedDataTypes = function() {
      if (this.sb) {
        return this.sb.getSupportedDataTypes();
      } else {
        return false;
      }
    };

    BaseModuleMessageService.prototype.broadcast = function(msg, data) {
      return this.$rootScope.$broadcast(msg, data);
    };

    BaseModuleMessageService.prototype.publish = function(msg, cb, dataFrame, deferred) {
      if (dataFrame == null) {
        dataFrame = null;
      }
      if (deferred == null) {
        deferred = null;
      }
      if (this.sb && indexOf.call(this.msgList.outgoing, msg) >= 0) {
        if (deferred == null) {
          deferred = this.$q.defer();
        }
        return this.sb.publish({
          msg: msg,
          msgScope: this.msgList.scope,
          callback: function() {
            return cb;
          },
          data: {
            tableName: this.$stateParams.projectId + ':' + this.$stateParams.forkId,
            promise: deferred,
            dataFrame: dataFrame
          }
        });
      } else {
        return false;
      }
    };

    BaseModuleMessageService.prototype.subscribe = function(msg, listener) {
      var token;
      if (this.sb && indexOf.call(this.msgList.incoming, msg) >= 0) {
        token = this.sb.subscribe({
          msg: msg,
          msgScope: this.msgList.scope,
          listener: listener
        });
        return token;
      } else {
        return false;
      }
    };

    BaseModuleMessageService.prototype.unsubscribe = function(token) {};

    if (BaseModuleMessageService.sb) {
      BaseModuleMessageService.sb.unsubscribe(token);
    } else {
      false;
    }

    return BaseModuleMessageService;

  })(BaseService);

}).call(this);

//# sourceMappingURL=BaseModuleMessageService.js.map
