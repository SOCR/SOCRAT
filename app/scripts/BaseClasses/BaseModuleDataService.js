// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseModuleDataService, BaseService,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseService = require('scripts/BaseClasses/BaseService.coffee');


  /*
    @name BaseModuleDataService
    @desc Base class for module data retrieval service
    @deps Requires injection of BaseModuleMessageService
   */

  module.exports = BaseModuleDataService = (function(superClass) {
    extend(BaseModuleDataService, superClass);

    function BaseModuleDataService() {
      return BaseModuleDataService.__super__.constructor.apply(this, arguments);
    }

    BaseModuleDataService.prototype.initialize = function() {
      this.getDataRequest = null;
      return this.getDataResponse = null;
    };

    BaseModuleDataService.prototype.getData = function(outMsg, inMsg, deferred) {
      var token;
      if (outMsg == null) {
        outMsg = null;
      }
      if (inMsg == null) {
        inMsg = null;
      }
      if (deferred == null) {
        deferred = null;
      }
      if (deferred == null) {
        deferred = this.$q.defer();
      }
      if ((this.getDataRequest != null) && !outMsg) {
        outMsg = this.getDataRequest;
      }
      if ((this.getDataResponse != null) && !inMsg) {
        inMsg = this.getDataResponse;
      }
      if (outMsg && inMsg) {
        token = this.msgManager.subscribe(inMsg, function(msg, data) {
          return deferred.resolve(data);
        });
        this.msgManager.publish(outMsg, function() {
          return this.msgManager.unsubscribe(token, null, deferred);
        });
      } else {
        deferred.reject();
      }
      return deferred.promise;
    };

    BaseModuleDataService.prototype.post = function(outMsg, inMsg, data) {
      var deferred, token;
      deferred = this.$q.defer();
      if (outMsg && inMsg) {
        token = this.msgManager.subscribe(inMsg, function(msg, data) {
          return deferred.resolve(data);
        });
        this.msgManager.publish(outMsg, function() {
          return this.msgManager.unsubscribe(token);
        }, data, deferred);
      } else {
        deferred.reject();
      }
      return deferred.promise;
    };

    BaseModuleDataService.prototype.saveData = function(outMsg, cb, data, deferred) {
      if (outMsg == null) {
        outMsg = null;
      }
      if (cb == null) {
        cb = null;
      }
      if (deferred == null) {
        deferred = null;
      }
      if (deferred == null) {
        deferred = this.$q.defer();
      }
      if ((this.saveDataMsg != null) && !outMsg) {
        outMsg = this.saveDataMsg;
      }
      if (data && outMsg) {
        this.msgManager.publish(outMsg, function() {
          this.msgManager.unsubscribe(token);
          if (cb != null) {
            cb();
          }
          return deferred.resolve;
        }, data, deferred);
      } else {
        deferred.reject();
      }
      return deferred.promise;
    };

    BaseModuleDataService.prototype.getDataTypes = function() {
      return this.msgManager.getSupportedDataTypes();
    };

    return BaseModuleDataService;

  })(BaseService);

}).call(this);

//# sourceMappingURL=BaseModuleDataService.js.map
