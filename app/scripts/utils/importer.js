// Generated by CoffeeScript 1.12.2

/* utils.importer Module */

(function() {
  var utils;

  utils = angular.module('app.utils.importer', ['app.utils.toolkit']);

  utils.factory('app.utils.importer', [
    'app.utils.importerEventMngr', function(evtMngr) {
      return function(sb) {
        var msgList;
        msgList = evtMngr.getMsgList();
        if (!(sb == null)) {
          evtMngr.setSb(sb);
        }
        return {
          init: function(opt) {
            console.log('%c importer init called', 'color: orange');
            return evtMngr.listenToIncomeEvents();
          },
          destroy: function() {},
          msgList: msgList
        };
      };
    }
  ]);

  utils.service('app.utils.importerEventMngr', [
    'app.utils.importer.csvUpload', 'app.utils.importer.sb', function(csvUpload, utilsSb) {
      var eventManager, msgList, sb;
      sb = null;
      msgList = {
        outcome: ['save table'],
        income: {
          'upload csv': {
            method: csvUpload,
            outcome: 'save table'
          }
        },
        scope: ['app.utils.importer']
      };
      eventManager = function(msg, data) {
        var _data, e;
        try {
          _data = msgList.income[msg].method.apply(null, data);
        } catch (error) {
          e = error;
          console.log('%c' + e.message, 'color:red');
          console.log(e.stack);
        }
        return console.log('%c Marker', 'color:blue');
      };
      return {
        setSb: function(_sb) {
          if (_sb === void 0) {
            return false;
          }
          sb = _sb;
          return utilsSb.set(_sb);
        },
        getMsgList: function() {
          return msgList;
        },
        listenToIncomeEvents: function() {
          var i, len, msg, ref, results;
          ref = msgList.income;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            msg = ref[i];
            console.log('subscribed for ' + msg);
            results.push(sb.subscribe({
              msg: msg,
              listener: eventManager,
              msgScope: msgList.scope,
              context: console
            }));
          }
          return results;
        }
      };
    }
  ]);

  utils.service('app.utils.importer.sb', function() {
    var _sb;
    _sb = {};
    return {
      get: function() {
        return _sb;
      },
      set: function(sb) {
        if (sb === void 0) {
          return false;
        }
        _sb = sb;
        return Object.freeze(_sb);
      }
    };
  });

  utils.factory('app.utils.importer.csvUpload', [
    '$q', 'app.utils.toolkit.toCSV', 'app.utils.importer.sb', function($q, toCSV, utilsSb) {
      return function(opts) {
        var cb, csv, deferred, sep;
        if (opts == null) {
          return false;
        }
        if (opts.projectId == null) {
          return false;
        }
        sep = opts.seperator || ',';
        deferred = $q.defer();
        cb = function(data) {
          var options;
          options = [];
          options.deferred = deferred;
          options.data = data;
          options.projectId = opts.projectId;
          options.forkId = opts.forkId || 'default';
          utilsSb.get().publish({
            msg: 'save table',
            data: options,
            msgScope: ['database']
          });
          return deferred.promise.then(function(opt) {
            if (opt.success) {
              opts.deferred.resolve('successfully saved!', data);
            }
            if (opt.failure) {
              return opts.deferred.reject('Database had an issue while saving CSV data');
            }
          });
        };
        if (opts.url != null) {
          csv = $http.get(opts.url).success(function(data, status) {
            return cb(data);
          }).error(function(data, status) {});
        } else {
          csv = toCSV(opts.data);
          cb(csv);
        }
        return deferred.promise;
      };
    }
  ]);

  utils.factory('app.utils.importer.jsonUpload', function() {});

}).call(this);

//# sourceMappingURL=importer.js.map
