// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseService, DatabaseDatavore,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  BaseService = require('scripts/BaseClasses/BaseService.coffee');


  /*
    @name: DatabaseDatavore
    @desc: Wrapper class for Datavore library
   */

  module.exports = DatabaseDatavore = (function(superClass) {
    extend(DatabaseDatavore, superClass);

    function DatabaseDatavore() {
      return DatabaseDatavore.__super__.constructor.apply(this, arguments);
    }

    DatabaseDatavore.prototype.initialize = function() {
      this.registry = [];
      this.listeners = {};
      this.db = {};
      return this.dv = require('datavore');
    };


    /*
      @returns {string|boolean}
     */

    DatabaseDatavore.prototype.register = function(tname, ref) {
      if (this.registry[tname] != null) {
        return false;
      }
      this.registry[tname] = ref;
      return tname;
    };

    DatabaseDatavore.prototype.fire = function(tname, cname) {
      var _table, i, ref1, results;
      if (typeof this.registry[tname] !== 'undefined' && typeof this.listeners[tname] !== 'undefined') {
        _table = this.listeners[tname];
      } else {
        return false;
      }
      if ((cname != null) && typeof _table[cname] !== 'undefined') {
        i = 0;
        while (i < _table[cname].cb.length) {
          if (typeof _table[cname].cb[i] === 'function') {
            _table[cname].cb[i](this.registry[tname][cname]);
          }
          i++;
        }
      }
      if (((ref1 = _table.cb) != null ? ref1.length : void 0) !== 0) {
        i = 0;
        results = [];
        while (i < _table.cb.length) {
          if (typeof _table.cb[i] === 'function') {
            _table.cb[i](this.registry[tname]);
          }
          results.push(i++);
        }
        return results;
      }
    };

    DatabaseDatavore.prototype.create = function(input, tname) {
      var _ref, col, j, len;
      if (this.registry[tname] != null) {
        return this.update(input, tname);
      } else {
        for (j = 0, len = input.length; j < len; j++) {
          col = input[j];
          switch (col.type) {
            case 'numeric':
              col.type = this.dv.type.numeric;
              break;
            case 'nominal':
              col.type = this.dv.type.nominal;
              break;
            case 'ordinal':
              col.type = this.dv.type.ordinal;
              break;
            default:
              col.type = this.dv.type.unknown;
          }
        }
        _ref = this.dv.table(input);
        this.register(tname, _ref);
        return this;
      }
    };

    DatabaseDatavore.prototype.update = function(input, tname) {
      this.destroy(tname);
      return this.create(input, tname);
    };

    DatabaseDatavore.prototype.addColumn = function() {
      var cname, iscolumn, j, tname, type, values;
      cname = arguments[0], values = arguments[1], type = arguments[2], iscolumn = 5 <= arguments.length ? slice.call(arguments, 3, j = arguments.length - 1) : (j = 3, []), tname = arguments[j++];
      if (this.registry[tname] != null) {
        this.registry[tname].addColumn(cname, values, type, iscolumn);
        return this.fire(tname, cname);
      }
    };

    DatabaseDatavore.prototype.removeColumn = function(cname, tname) {
      var ref1;
      if (((ref1 = this.registry[tname]) != null ? ref1[cname] : void 0) != null) {
        this.fire(tname, cname);
        delete this.registry[tname][cname];
        return true;
      } else {
        return false;
      }
    };

    DatabaseDatavore.prototype.addListener = function(opts) {
      if (opts != null) {
        if (typeof opts === 'function') {
          return false;
        } else {
          if (opts.table != null) {
            this.listeners[opts.table] = this.listeners[opts.table] || {
              cb: []
            };
            if (opts.column != null) {
              this.listeners[opts.table][opts.column] = this.listeners[opts.table][opts.column] || {
                cb: []
              };
              this.listeners[opts.table][opts.column]['cb'].push(opts.listener);
            } else {
              this.listeners[opts.table]['cb'].push(opts.listener);
            }
          }
        }
      }
      console.log('%cDATABASE:: listeners:', 'color:green');
      return console.log(this.listeners[opts.table]);
    };

    DatabaseDatavore.prototype.destroy = function(tname) {
      if (this.registry[tname] != null) {
        delete this.registry[tname];
        return true;
      } else {
        return false;
      }
    };

    DatabaseDatavore.prototype.rows = function(tname) {
      if (this.registry[tname] != null) {
        return this.registry[tname].rows();
      }
    };

    DatabaseDatavore.prototype.cols = function(tname) {
      if (this.registry[tname] != null) {
        return this.registry[tname].cols();
      }
    };

    DatabaseDatavore.prototype.get = function(tname, col, row) {
      if (this.registry[tname] != null) {
        if (col != null) {
          if (row != null) {
            return this.registry[tname][col].get(row);
          } else {
            return this.registry[tname][col];
          }
        } else {
          return this.registry[tname];
        }
      } else {
        return false;
      }
    };

    DatabaseDatavore.prototype.exists = function(tname) {
      if (this.registry[tname] != null) {
        return true;
      } else {
        return false;
      }
    };

    DatabaseDatavore.prototype.query = function(q, name) {
      return this.dense_query(q, name);
    };

    DatabaseDatavore.prototype.dense_query = function(q, tname) {
      if (this.registry[tname] != null) {
        return this.registry[tname].dense_query(q);
      }
    };

    DatabaseDatavore.prototype.sparse_query = function(q, tname) {
      if (this.registry[tname] != null) {
        return this.registry[tname].sparse_query(q);
      }
    };

    DatabaseDatavore.prototype.where = function(q, tname) {
      if (this.registry[tname] != null) {
        return this.registry[tname].where(q);
      }
    };

    return DatabaseDatavore;

  })(BaseService);

}).call(this);

//# sourceMappingURL=DatabaseDatavore.service.js.map
