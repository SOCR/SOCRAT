// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var BaseModuleInitService, DatabaseHandler,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModuleInitService = require('scripts/BaseClasses/BaseModuleInitService.coffee');

  module.exports = DatabaseHandler = (function(superClass) {
    extend(DatabaseHandler, superClass);

    function DatabaseHandler() {
      this.getData = bind(this.getData, this);
      this.saveData = bind(this.saveData, this);
      return DatabaseHandler.__super__.constructor.apply(this, arguments);
    }

    DatabaseHandler.inject('$q', '$timeout', 'app_analysis_database_dv', 'app_analysis_database_nestedStorage', 'app_analysis_database_dataAdaptor', 'app_analysis_database_msgService');

    DatabaseHandler.prototype.initialize = function() {
      this.eventManager = this.app_analysis_database_msgService;
      this.nestedDb = this.app_analysis_database_nestedStorage;
      this.dataAdaptor = this.app_analysis_database_dataAdaptor;
      this.db = this.app_analysis_database_dv;
      this.DATA_TYPES = null;
      return this.lastDataType = '';
    };

    DatabaseHandler.prototype.saveData = function(obj) {
      var dataFrame, dvData, res;
      if (obj.dataFrame != null) {
        dataFrame = obj.dataFrame;
        if (dataFrame.dataType != null) {
          this.lastDataType = dataFrame.dataType;
          switch (dataFrame.dataType) {
            case this.DATA_TYPES.FLAT:
              dvData = this.dataAdaptor.toDvTable(dataFrame);
              res = this.db.create(dvData, obj.tableName);
              return res;
            case this.DATA_TYPES.NESTED:
              this.nestedDb.save(obj.dataFrame.data);
              return true;
            default:
              return console.log('%cDATABASE: data type is unknown', 'color:green');
          }
        } else {
          return console.log('%cDATABASE: data type is unknown', 'color:green');
        }
      } else {
        return console.log('%cDATABASE: nothing to save', 'color:green');
      }
    };

    DatabaseHandler.prototype.getData = function(data) {
      var _data;
      switch (this.lastDataType) {
        case this.DATA_TYPES.FLAT:
          _data = this.db.get(data.tableName);
          _data = this.dataAdaptor.toDataFrame(_data);
          _data.dataType = this.DATA_TYPES.FLAT;
          return _data;
        case this.DATA_TYPES.NESTED:
          _data = this.nestedDb.get();
          return _data = {
            data: _data,
            dataType: this.DATA_TYPES.NESTED
          };
        default:
          return console.log('%cDATABASE: data type is unknown', 'color:green');
      }
    };

    DatabaseHandler.prototype.setDbListeners = function() {
      var _methods;
      _methods = [
        {
          incoming: 'save table',
          outgoing: 'table saved',
          event: this.saveData
        }, {
          incoming: 'get table',
          outgoing: 'take table',
          event: this.getData
        }, {
          incoming: 'add listener',
          outgoing: 'listener added',
          event: this.db.addListener
        }
      ];
      return {
        status: _methods.map((function(_this) {
          return function(method) {
            return _this.eventManager.subscribe(method['incoming'], function(msg, obj) {
              var _data, deferred;
              console.log("%cDATABASE: listener called for" + msg, "color:green");
              _data = method.event.apply(null, [obj]);
              deferred = obj.promise;
              if (typeof deferred !== 'undefined') {
                if (_data !== false) {
                  deferred.resolve();
                } else {
                  deferred.reject();
                }
              } else {
                _data.promise = $q.defer();
              }
              return _this.eventManager.publish(method['outgoing'], function() {
                return console.log('%cDATABASE: listener response: ' + _data, 'color:green');
              }, _data);
            });
          };
        })(this))
      };
    };

    DatabaseHandler.prototype.initDb = function() {
      return this.$timeout((function(_this) {
        return function() {
          _this.DATA_TYPES = _this.eventManager.getSupportedDataTypes();
          return _this.setDbListeners();
        };
      })(this));
    };

    return DatabaseHandler;

  })(BaseModuleInitService);

}).call(this);

//# sourceMappingURL=DatabaseHandler.service.js.map
