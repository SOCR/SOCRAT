// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var AppRoute, Module,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Module = require('scripts/BaseClasses/BaseModule.coffee');


  /*
   * @name AppConfig
   * @desc Class for config block of application module
   */

  module.exports = AppRoute = (function() {
    function AppRoute(modules1) {
      this.modules = modules1;
      this.linkDynamic = bind(this.linkDynamic, this);
    }

    AppRoute.prototype.linkStatic = function($stateProvider) {
      return $stateProvider.state('home', {
        url: '/home',
        views: {
          'main': {
            template: require('partials/nav/home.jade')()
          },
          'sidebar': {
            template: require('partials/projects.jade')()
          }
        }
      }).state('guide', {
        url: '/guide',
        views: {
          'main': {
            template: require('partials/nav/guide-me.jade')()
          },
          'sidebar': {
            template: require('partials/projects.jade')()
          }
        }
      }).state('contact', {
        url: '/contact',
        views: {
          'main': {
            template: require('partials/nav/contact.jade')()
          }
        }
      });
    };

    AppRoute.prototype.linkDynamic = function($stateProvider, modules) {
      var i, k, len, module, ref, results, v;
      if (modules == null) {
        modules = this.modules;
      }
      results = [];
      for (i = 0, len = modules.length; i < len; i++) {
        module = modules[i];
        if (module instanceof Module) {
          if (((ref = module.state) != null ? ref.url : void 0) != null) {
            results.push($stateProvider.state(module.id, {
              url: module.state.url,
              views: {
                'main': {
                  template: module.state.mainTemplate()
                },
                'sidebar': {
                  template: module.state.sidebarTemplate()
                }
              }
            }));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(this.linkDynamic($stateProvider, ((function() {
            var results1;
            results1 = [];
            for (k in module) {
              v = module[k];
              results1.push(v);
            }
            return results1;
          })())[0]));
        }
      }
      return results;
    };

    AppRoute.prototype.getRouter = function($locationProvider, $urlRouterProvider, $stateProvider) {
      $urlRouterProvider.when('/', '/').otherwise('/home');
      this.linkStatic($stateProvider);
      this.linkDynamic($stateProvider);
      $locationProvider.html5Mode(false);
      return console.log('app: routing is set up');
    };

    return AppRoute;

  })();

}).call(this);

//# sourceMappingURL=AppRoute.js.map
