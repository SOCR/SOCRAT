// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var AppMessageMap, AppRun, Module;

  Module = require('scripts/BaseClasses/BaseModule.coffee');

  AppMessageMap = require('scripts/App/AppMessageMap.coffee');


  /*
   * @name AppRun
   * @desc Class for run block of application module
   */

  module.exports = AppRun = (function() {
    AppRun.prototype.menu = [];

    function AppRun(modules, runModuleNames) {
      this.modules = modules;
      this.runModuleNames = runModuleNames;
    }

    AppRun.prototype.runModules = function(core, runServices) {
      var i, idx, len, module, ref, results;
      ref = this.runModuleNames;
      results = [];
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        module = ref[idx];
        if (core.register(module, runServices[idx])) {
          results.push(core.start(module));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    AppRun.prototype.buildMenu = function() {
      var createItem, i, item, len, module, ref, results;
      createItem = function(module) {
        var el, group, groupName, item, k, ref, ref1, v;
        item = null;
        if (module instanceof Module) {
          if (((ref = module.state) != null ? ref.name : void 0) && module.state.url) {
            item = {
              id: module.id,
              name: module.state.name,
              url: module.state.url,
              type: 'text'
            };
          }
        } else {
          ref1 = ((function() {
            var results;
            results = [];
            for (k in module) {
              v = module[k];
              results.push([v, k]);
            }
            return results;
          })())[0], group = ref1[0], groupName = ref1[1];
          item = {
            name: groupName,
            type: 'group',
            items: (function() {
              var i, len, results;
              results = [];
              for (i = 0, len = group.length; i < len; i++) {
                el = group[i];
                results.push(createItem(el));
              }
              return results;
            })()
          };
        }
        return item;
      };
      ref = this.modules;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        module = ref[i];
        item = createItem(module);
        if (item) {
          results.push(this.menu.push(item));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    AppRun.prototype.getRun = function($rootScope, core, runServices) {
      console.log('APP RUN');
      core.setEventsMapping(new AppMessageMap());
      this.runModules(core, runServices);
      this.buildMenu();
      $rootScope.$on('app:get_menu', (function(_this) {
        return function() {
          return $rootScope.$broadcast('app:set_menu', _this.menu);
        };
      })(this));
      $rootScope.$on("$stateChangeSuccess", function(scope, next, change) {
        console.log('APP: state change: ');
        return console.log(arguments);
      });
      return console.log('run block of app module');
    };

    return AppRun;

  })();

}).call(this);

//# sourceMappingURL=AppRun.js.map
