// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var AppConfig, AppRoute, AppRun, Module,
    slice = [].slice;

  Module = require('scripts/BaseClasses/BaseModule.coffee');

  AppRoute = require('scripts/App/AppRoute.coffee');

  AppRun = require('scripts/App/AppRun.coffee');


  /*
   * @name AppConfig
   * @desc Class for config block of application module
   */

  module.exports = AppConfig = (function() {
    AppConfig.prototype.INIT_SERVICE_SUFFIX = '_initService';

    AppConfig.prototype.runModules = [];

    AppConfig.prototype.runServices = [];

    function AppConfig(moduleList) {
      this.moduleList = moduleList;
      this.addModuleComponents();
    }

    AppConfig.prototype.addModuleComponents = function(modules) {
      var Ctrl, Dir, Service, angModule, ctrlName, dirName, i, k, len, module, moduleComponents, moduleRunBlock, ref, ref1, ref2, results, serviceName, v;
      if (modules == null) {
        modules = this.moduleList.getAnalysisModules();
      }
      results = [];
      for (i = 0, len = modules.length; i < len; i++) {
        module = modules[i];
        if (module instanceof Module) {
          angModule = angular.module(module.id);
          if (module.components != null) {
            moduleComponents = module.components;
            if (moduleComponents.services) {
              ref = moduleComponents.services;
              for (serviceName in ref) {
                Service = ref[serviceName];
                Service.register(angModule, serviceName);
                console.log('AppConfig: created service ' + serviceName);
                if (serviceName.endsWith(this.INIT_SERVICE_SUFFIX)) {
                  this.runModules.push(module.id);
                  this.runServices.push(serviceName);
                }
              }
            }
            if (moduleComponents.controllers) {
              ref1 = moduleComponents.controllers;
              for (ctrlName in ref1) {
                Ctrl = ref1[ctrlName];
                Ctrl.register(angModule, ctrlName);
                console.log('AppConfig: created controller ' + ctrlName);
              }
            }
            if (moduleComponents.directives) {
              ref2 = moduleComponents.directives;
              for (dirName in ref2) {
                Dir = ref2[dirName];
                Dir.register(angModule, dirName);
                console.log('AppConfig: created directive ' + dirName);
              }
            }
            if (moduleComponents.runBlock) {
              moduleRunBlock = new moduleComponents.runBlock(angModule);
              moduleRunBlock.register();
            }
            results.push(console.log('AppConfig: created module ' + module.id));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(this.addModuleComponents(((function() {
            var results1;
            results1 = [];
            for (k in module) {
              v = module[k];
              results1.push(v);
            }
            return results1;
          })())[0]));
        }
      }
      return results;
    };

    AppConfig.prototype.getConfigBlock = function() {
      var appRoute, config;
      appRoute = new AppRoute(this.moduleList.getAnalysisModules());
      config = (function(_this) {
        return function($locationProvider, $urlRouterProvider, $stateProvider) {
          return appRoute.getRouter($locationProvider, $urlRouterProvider, $stateProvider);
        };
      })(this);
      config.$inject = ['$locationProvider', '$urlRouterProvider', '$stateProvider'];
      return config;
    };

    AppConfig.prototype.getRunBlock = function() {
      var appRun, runBlock;
      appRun = new AppRun(this.moduleList.getAnalysisModules(), this.runModules);
      runBlock = (function(_this) {
        return function() {
          var $rootScope, core, modules;
          $rootScope = arguments[0], core = arguments[1], modules = 3 <= arguments.length ? slice.call(arguments, 2) : [];
          return appRun.getRun($rootScope, core, modules);
        };
      })(this);
      runBlock.$inject = ['$rootScope', 'app_core_service'].concat(this.runServices);
      return runBlock;
    };

    return AppConfig;

  })();

}).call(this);

//# sourceMappingURL=AppConfig.js.map
