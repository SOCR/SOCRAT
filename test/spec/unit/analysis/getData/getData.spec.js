// Generated by CoffeeScript 1.12.2
(function() {
  "use strict";
  describe("getData", function() {
    angular.module("ngGrid", []);
    angular.module("ui.bootstrap", []);
    angular.module('app_mocks_get_data', []).service('app_analysis_getData_manager', [
      'sb', function(sb) {
        return {
          getSb: function() {
            return sb;
          }
        };
      }
    ]).service('sb', function() {
      this.events = [];
      this.publish = (function(_this) {
        return function(event) {
          var item, ref, result;
          console.log('mock pubSub: published');
          console.log(event);
          console.log((ref = _this.events[0]) != null ? ref.listener : void 0);
          return result = (function() {
            var i, len, ref1, results;
            ref1 = this.events;
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
              item = ref1[i];
              if (item.msg === event.msg) {
                results.push(item.listener(item.msg));
              }
            }
            return results;
          }).call(_this);
        };
      })(this);
      this.subscribe = (function(_this) {
        return function(event) {
          _this.events.push(event);
          console.log('mock pubSub: subscribed');
          return console.log(_this.events);
        };
      })(this);
      this.unsubscribe = function() {};
      return {
        publish: this.publish,
        subscribe: this.subscribe,
        unsubscribe: this.unsubscribe
      };
    }).service("$stateParams", function() {
      return {
        projectId: 'manhattan',
        forkId: 'evil'
      };
    });
    beforeEach(function() {
      module("app_analysis_getData");
      return module("app_mocks_get_data");
    });
    describe("showState", function() {
      it("should return false if input obj is not defined.", function() {
        return inject(function(showState) {
          var ss;
          ss = new showStateService();
          return expect(Object.keys(ss).length).toBe(0);
        });
      });
      it("should create showState object to supplied scope.", function() {
        return inject(function(showState, $rootScope) {
          var scope, ss;
          scope = $rootScope.$new();
          ss = new showStateService(["div1", "div2"], scope);
          expect(scope.showStateService).toBeDefined();
          expect(typeof scope.showStateService).toEqual("object");
          return expect(Object.keys(scope.showStateService).length).toEqual(2);
        });
      });
      return it("sets supplied showState[index] to false, and everything else to true.", function() {
        return inject(function(showState, $rootScope) {
          var scope, ss;
          scope = $rootScope.$new();
          ss = new showStateService(["div1", "div2"], scope);
          ss.set("div1");
          expect(scope.showStateService["div1"]).toBeFalsy();
          return expect(scope.showStateService["div2"]).toBeTruthy();
        });
      });
    });
    describe("app_analysis_getData_jsonParser", function() {
      beforeEach(inject(function($injector) {
        var $httpBackend;
        $httpBackend = $injector.get('$httpBackend');
        return $httpBackend.expect("JSONP", "test.json").respond('[{"page":1,"pages":13038,"per_page":"1","total":13038}]');
      }));
      it("should return false if input is empty", function() {});
      return it("should return object when worldbank url is passed", function() {
        return inject(function(app_analysis_getData_jsonParser) {
          var obj, opts;
          opts = {
            url: "test.json",
            type: "worldBank"
          };
          return obj = app_analysis_getData_jsonParser(opts);
        });
      });
    });
    return describe("app_analysis_getData_inputCache", function() {
      beforeEach(function() {});
      it("should return false if input data is empty", function() {
        return inject(function(app_analysis_getData_inputCache) {
          expect(app_analysis_getData_inputCache.set(null)).toBeFalsy();
          expect(app_analysis_getData_inputCache.set([])).toBeTruthy();
          return expect(app_analysis_getData_inputCache.set([1, 2, 4])).toBeTruthy();
        });
      });
      return it("should publish message if data not updated within 4 seconds of first update", function() {
        return inject(function($timeout, sb, app_analysis_getData_inputCache) {
          var foo;
          foo = {
            cb: function() {}
          };
          spyOn(foo, "cb");
          sb.subscribe({
            msg: 'handsontable updated',
            listener: foo.cb,
            msgScope: ['getData']
          });
          app_analysis_getData_inputCache.set([1, 2, 3]);
          $timeout.flush();
          return expect(foo.cb).toHaveBeenCalled();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=getData.spec.js.map
