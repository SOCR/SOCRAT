// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  describe("errorMngr Module", function() {
    var err, foo;
    err = {
      message: "This error will be published!",
      type: 'error',
      priority: 1,
      testFunc: function() {},
      display: true
    };
    foo = {
      cb1: function() {},
      cb2: function() {}
    };
    beforeEach(function() {
      module("app_errorMngr");
      return module("app_mocks");
    });
    return describe("$exceptionHandler service", function() {
      it("contains the service", function() {
        return inject(function($exceptionHandler) {
          return expect($exceptionHandler).toBeTruthy();
        });
      });
      it("logs the error and publishes a message when display is true", function() {
        return inject(function($exceptionHandler, pubSub) {
          var res;
          spyOn(foo, "cb1");
          pubSub.subscribe({
            msg: "Display error to frontend",
            msgScope: ["error"],
            listener: foo.cb1
          });
          res = $exceptionHandler(err);
          return expect(foo.cb1).toHaveBeenCalled();
        });
      });
      it("logs the error and doesnt publishes message when display is false", function() {
        return inject(function($exceptionHandler, pubSub) {
          var dontShowError;
          spyOn(foo, "cb1");
          pubSub.subscribe({
            msg: "Display error to fontend",
            msgScope: ["error"],
            listener: foo.cb1
          });
          dontShowError = {
            message: "This error wont be published [but will still be logged]!",
            type: 'error',
            display: false
          };
          $exceptionHandler(dontShowError);
          return expect(foo.cb1).not.toHaveBeenCalled();
        });
      });
      return it("sets the debugMode ", function() {
        return inject(function($exceptionHandler, $log) {
          $exceptionHandler({
            debug: 0
          });
          $exceptionHandler(err);
          expect($log.error.logs).toEqual([]);
          $exceptionHandler({
            debug: 1
          });
          $exceptionHandler(err);
          return expect($log.error.logs.pop()).toEqual(['This error will be published!']);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=errorMngr.spec.js.map
