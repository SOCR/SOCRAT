// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  describe('Sandbox module', function() {
    var $injector;
    $injector = angular.injector(['app_sandbox']);
    return describe('provides service sandbox', function() {
      var Sandbox;
      Sandbox = $injector.get('Sandbox');
      return describe('constructor', function() {
        it('returns an object', function() {
          (expect(typeof new Sandbox({}, 'myId'))).toEqual('object');
          return (expect(new Sandbox({}, 'myId'))).not.toBe(new Sandbox({}, 'myId'));
        });
        it('throws an error if the core was not defined', function() {
          return (expect(function() {
            return new Sandbox(null, 'an id');
          })).toThrow(new TypeError("core was not defined"));
        });
        it('throws an error if no id was specified', function() {
          return (expect(function() {
            return new Sandbox({});
          })).toThrow(new TypeError('no id was specified'));
        });
        it('throws an error if id is not a string', function() {
          return (expect(function() {
            return new Sandbox({}, {});
          })).toThrow(new TypeError('id is not a string'));
        });
        it('stores the instance id in "instanceID"', function() {
          var sandbox;
          sandbox = new Sandbox({}, 'myId');
          return (expect('myId')).toEqual(sandbox.instanceId);
        });
        it('has an empty object if no options were specified', function() {
          return (expect((new Sandbox({}, 'myId')).options)).toEqual({});
        });
        return it('stores the option object', function() {
          var myOpts;
          myOpts = {
            settingOne: 'its boring'
          };
          return (expect((new Sandbox({}, 'myId', myOpts)).options)).toEqual(myOpts);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=sandbox.spec.js.map
