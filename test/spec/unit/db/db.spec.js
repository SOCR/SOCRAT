// Generated by CoffeeScript 1.12.2
(function() {
  "use strict";
  describe("app.db module", function() {
    var colA, colB, colC, get_table_data, save_table_data, table;
    colA = ["a", "a", "b", "b", "c"];
    colB = [0, 1, 2, 3, 4];
    colC = [12, 3, 42, 4];
    table = [
      {
        name: "A",
        values: colA,
        type: "nominal"
      }, {
        name: "B",
        values: colB,
        type: "numeric"
      }
    ];
    get_table_data = {
      tableName: 'test_table'
    };
    save_table_data = {
      promise: '',
      tableName: 'test_table',
      dataFrame: {
        data: [[1, 2], [3, 4]],
        header: ['firstC', 'secondC'],
        nRows: 2,
        nCols: 2
      }
    };
    beforeEach(function() {
      module("app_database");
      return module("app_mocks");
    });
    describe("database service", function() {
      it("creates a table and returned object contains crud API", function() {
        return inject(function(app_database_dv) {
          var obj;
          obj = app_database_dv.create(table, "test");
          expect(app_database_dv.exists("test")).toBeTruthy();
          expect(typeof obj).toEqual("object");
          expect(typeof obj.addColumn).toEqual("function");
          expect(typeof obj.removeColumn).toEqual("function");
          expect(typeof obj.addListener).toEqual("function");
          expect(typeof obj.create).toEqual("function");
          return expect(typeof obj.destroy).toEqual("function");
        });
      });
      it("creates table and retrieves a real dataset", function() {
        return inject(function(app_database_dv) {
          var _died, _sex, _table;
          _sex
          _died = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          _table = [
            {
              name: "sex",
              values: _sex,
              type: "numeric"
            }, {
              name: "died",
              values: _died,
              type: "numeric"
            }
          ];
          app_database_dv.create(_table, "heart attack data");
          expect(app_database_dv.get("heart attack data", "sex").length).toEqual(264);
          expect(app_database_dv.get("heart attack data", "died").length).toEqual(264);
          expect(app_database_dv.get("heart attack data", "sex")).toMatch(_sex);
          expect(app_database_dv.get("heart attack data", "died")).toMatch(_died);
          expect(app_database_dv.get("heart attack data")[0]).toMatch(_sex);
          return expect(app_database_dv.get("heart attack data")[1]).toMatch(_died);
        });
      });
      it("append column to existing table and read it from the returned obj", function() {
        return inject(function(app_database_dv) {
          app_database_dv.create(table, "test");
          app_database_dv.addColumn("C", colC, "numeric", "test");
          return expect(app_database_dv.get("test", "C")).toMatch([12, 3, 42, 4]);
        });
      });
      it("remove column from existing table ", function() {
        return inject(function(app_database_dv) {
          app_database_dv.create(table, "test");
          app_database_dv.removeColumn("B", "test");
          expect(app_database_dv.get("test", "B")).not.toBeDefined();
          return expect(app_database_dv.get("test", "A")).toBeDefined();
        });
      });
      it("returns false if column doesnt exist", function() {
        return inject(function(app_database_dv) {
          app_database_dv.create(table, "test");
          expect(app_database_dv.removeColumn("B", "test1")).toBeFalsy();
          return expect(app_database_dv.removeColumn("D", "test")).toBeFalsy();
        });
      });
      it("add a listener to a table and trigger with model change", function() {
        return inject(function(app_database_dv) {
          var foo;
          app_database_dv.create(table, "test");
          foo = {
            cb: function() {}
          };
          spyOn(foo, "cb");
          app_database_dv.addListener({
            table: "test",
            listener: foo.cb
          });
          app_database_dv.addColumn("C", colC, "numeric", "test");
          return expect(foo.cb).toHaveBeenCalled();
        });
      });
      it("add listeners to a column and trigger with model change", function() {
        return inject(function(app_database_dv) {
          var foo;
          app_database_dv.create(table, "test");
          foo = {
            cb1: function() {},
            cb2: function() {}
          };
          spyOn(foo, "cb1");
          spyOn(foo, "cb2");
          app_database_dv.addListener({
            table: "test",
            column: "C",
            listener: foo.cb1
          });
          app_database_dv.addListener({
            table: "test",
            column: "B",
            listener: foo.cb2
          });
          app_database_dv.addColumn("C", colC, "numeric", "test");
          expect(foo.cb1).toHaveBeenCalled();
          return expect(foo.cb2).not.toHaveBeenCalled();
        });
      });
      it("destroys a table if it exists", function() {
        return inject(function(app_database_dv) {
          app_database_dv.create(table, "tab1");
          expect(app_database_dv.destroy("tab1")).toBeTruthy();
          expect(app_database_dv.destroy("tab2")).toBeFalsy();
          return expect(app_database_dv.exists("tab1")).toBeFalsy();
        });
      });
      it("append data to column.", function() {});
      it("performs (SQL like)filtering queries using where", function() {
        return inject(function(app_database_dv) {
          var tab2;
          app_database_dv.create(table, "tab1");
          tab2 = app_database_dv.where(function(table, row) {
            return table.get("B", row) > 1;
          }, "tab1");
          expect(tab2[0]).toMatch([1, 1, 2]);
          return expect(tab2[1]).toMatch([2, 3, 4]);
        });
      });
      it("performs (SQL like)aggregating queries using query(same as dense_query)", function() {
        return inject(function(app_database_dv) {
          var filter, tab2, tab3;
          app_database_dv.create(table, "tab1");
          tab2 = app_database_dv.dense_query({
            dims: [0],
            vals: [dv.count(), dv.sum(1)]
          }, "tab1");
          expect(tab2).toMatch([["a", "b", "c"], [2, 2, 1], [1, 5, 4]]);
          tab3 = app_database_dv.dense_query({
            dims: [0],
            vals: [dv.count(), dv.sum(1)],
            code: true
          }, "tab1");
          expect(tab3).toMatch([[0, 1, 2], [2, 2, 1], [1, 5, 4]]);
          filter = app_database_dv.dense_query({
            dims: [0],
            vals: [dv.count()],
            where: function(table, row) {
              return table.get("A", row) !== "a";
            }
          }, "tab1");
          return expect(filter).toMatch([["a", "b", "c"], [0, 2, 1]]);
        });
      });
      return it("performs (SQL like)filtering queries using where", function() {
        return inject(function(app_database_dv) {
          var filter;
          app_database_dv.create(table, "tab1");
          filter = app_database_dv.sparse_query({
            dims: [0],
            vals: [dv.count()],
            where: function(table, row) {
              return table.get("A", row) !== "a";
            }
          }, "tab1");
          return expect(filter).toMatch([["b", "c"], [2, 1]]);
        });
      });
    });
    it("executes listeners on publishing of registered msgs in the msgList", function() {
      return inject(function(app_database_manager, app_database_handler, pubSub, $q) {
        var foo;
        app_database_manager.setSb(pubSub);
        foo = {
          cb: function() {}
        };
        spyOn(foo, 'cb');
        pubSub.subscribe({
          msg: 'table saved',
          listener: foo.cb,
          msgScope: ['database']
        });
        save_table_data.promise = $q.defer();
        pubSub.publish({
          msg: 'save table',
          data: save_table_data,
          msgScope: ['getData']
        });
        return expect(foo.cb).toHaveBeenCalled();
      });
    });
    return it("returns table in dataFrame format", function() {
      return inject(function(app_database_manager, app_database_handler, pubSub, $q) {
        app_database_manager.setSb(pubSub);
        save_table_data.promise = $q.defer();
        pubSub.publish({
          msg: 'save table',
          data: save_table_data,
          msgScope: ['getData']
        });
        pubSub.subscribe({
          msg: 'take table',
          msgScope: ['database'],
          listener: function(msg, tableData) {
            expect(typeof tableData).toEqual('object');
            expect(typeof tableData.data).toEqual('object');
            expect(typeof tableData.header).toEqual('object');
            expect(typeof tableData.nRows).toEqual('number');
            return expect(typeof tableData.nCols).toEqual('number');
          }
        });
        return pubSub.publish({
          msg: 'get table',
          data: get_table_data,
          msgScope: ['getData']
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=db.spec.js.map
