// Generated by CoffeeScript 1.12.2
(function() {
  var slice = [].slice;

  angular.module('app_mocks', []).factory('Sandbox', function() {
    return function(_core, _instanceId, _options) {
      if (_options == null) {
        _options = {};
      }
      this.core = this;
      this.instanceId = _instanceId;
      return this.options = {};
    };
  }).service('pubSub', function() {
    this.events = [];
    this.publish = (function(_this) {
      return function(event) {
        var item, result;
        console.log('mock pubSub: published for ' + event.msg);
        return result = (function() {
          var j, len, ref, results;
          ref = this.events;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            item = ref[j];
            if (item.msg === event.msg) {
              results.push(item.listener(item.msg, event.data));
            }
          }
          return results;
        }).call(_this);
      };
    })(this);
    this.subscribe = (function(_this) {
      return function(event) {
        _this.events.push(event);
        console.log('mock pubSub: subscribed');
        return console.log(_this.events);
      };
    })(this);
    this.unsubscribe = function() {};
    return {
      publish: this.publish,
      subscribe: this.subscribe,
      unsubscribe: this.unsubscribe
    };
  }).service('eventMngr', [
    'pubSub', 'utils', function(pubSub, utils) {
      this.incomeCallbacks = {};
      this.eventManager = function(msg, data) {
        var _data, e;
        try {
          return _data = this.incomeCallbacks[msg](data);
        } catch (error) {
          e = error;
          return console.log(e.message);
        }
      };
      this.subscribeForEvents = function() {
        var events, i, listnrList, msg, ref, results;
        events = arguments[0], listnrList = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (listnrList == null) {
          listnrList = this.eventManager;
        }
        ref = events.msgList;
        results = [];
        for (i in ref) {
          msg = ref[i];
          console.log(msg);
          console.log(pubSub.subscribe);
          results.push(pubSub.subscribe({
            msg: msg,
            listener: utils.typeIsArray(listnrList) ? listnrList[i] : listnrList,
            msgScope: events.scope
          }));
        }
        return results;
      };
      return {
        subscribeForEvents: this.subscribeForEvents,
        publish: pubSub.publish,
        subscribe: pubSub.subscribe
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=mock.js.map
